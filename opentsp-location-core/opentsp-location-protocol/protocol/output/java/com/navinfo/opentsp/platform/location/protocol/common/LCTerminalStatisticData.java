// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/common/java/StatisticData.proto

package com.navinfo.opentsp.platform.location.protocol.common;

public final class LCTerminalStatisticData {
  private LCTerminalStatisticData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface StatisticDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int64 time = 1;
    boolean hasTime();
    long getTime();
    
    // optional int32 latitude = 2;
    boolean hasLatitude();
    int getLatitude();
    
    // optional int32 longitude = 3;
    boolean hasLongitude();
    int getLongitude();
    
    // optional int32 height = 4;
    boolean hasHeight();
    int getHeight();
    
    // optional int32 direction = 5;
    boolean hasDirection();
    int getDirection();
    
    // optional int32 speed = 6;
    boolean hasSpeed();
    int getSpeed();
    
    // optional int32 routeStartTime = 7;
    boolean hasRouteStartTime();
    int getRouteStartTime();
    
    // optional int32 routeEndTime = 8;
    boolean hasRouteEndTime();
    int getRouteEndTime();
    
    // optional int32 driveCycleMileage = 9;
    boolean hasDriveCycleMileage();
    int getDriveCycleMileage();
    
    // optional int32 idlingMileage = 10;
    boolean hasIdlingMileage();
    int getIdlingMileage();
    
    // optional int32 paringRangeMileage = 11;
    boolean hasParingRangeMileage();
    int getParingRangeMileage();
    
    // optional int32 parkingIdleTime = 12;
    boolean hasParkingIdleTime();
    int getParkingIdleTime();
    
    // optional int32 brakeNumber = 13;
    boolean hasBrakeNumber();
    int getBrakeNumber();
    
    // optional int32 cumulativeMileage = 14;
    boolean hasCumulativeMileage();
    int getCumulativeMileage();
    
    // optional int32 brakingTime = 15;
    boolean hasBrakingTime();
    int getBrakingTime();
    
    // optional int32 accelerationFrequency = 16;
    boolean hasAccelerationFrequency();
    int getAccelerationFrequency();
    
    // optional int32 decelerationFrequency = 17;
    boolean hasDecelerationFrequency();
    int getDecelerationFrequency();
    
    // optional int32 vehicleEstimatedLoad = 18;
    boolean hasVehicleEstimatedLoad();
    int getVehicleEstimatedLoad();
    
    // optional int32 initialTotalFuelConsumption = 19;
    boolean hasInitialTotalFuelConsumption();
    int getInitialTotalFuelConsumption();
    
    // optional int32 terminationTotalFuelConsumption = 20;
    boolean hasTerminationTotalFuelConsumption();
    int getTerminationTotalFuelConsumption();
    
    // optional int32 cruiseRange = 21;
    boolean hasCruiseRange();
    int getCruiseRange();
    
    // optional int32 averageSpeedInterval = 22;
    boolean hasAverageSpeedInterval();
    int getAverageSpeedInterval();
    
    // optional int32 overSpeedTimes = 23;
    boolean hasOverSpeedTimes();
    int getOverSpeedTimes();
  }
  public static final class StatisticData extends
      com.google.protobuf.GeneratedMessage
      implements StatisticDataOrBuilder {
    // Use StatisticData.newBuilder() to construct.
    private StatisticData(Builder builder) {
      super(builder);
    }
    private StatisticData(boolean noInit) {}
    
    private static final StatisticData defaultInstance;
    public static StatisticData getDefaultInstance() {
      return defaultInstance;
    }
    
    public StatisticData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.internal_static_StatisticData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.internal_static_StatisticData_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int64 time = 1;
    public static final int TIME_FIELD_NUMBER = 1;
    private long time_;
    public boolean hasTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public long getTime() {
      return time_;
    }
    
    // optional int32 latitude = 2;
    public static final int LATITUDE_FIELD_NUMBER = 2;
    private int latitude_;
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getLatitude() {
      return latitude_;
    }
    
    // optional int32 longitude = 3;
    public static final int LONGITUDE_FIELD_NUMBER = 3;
    private int longitude_;
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getLongitude() {
      return longitude_;
    }
    
    // optional int32 height = 4;
    public static final int HEIGHT_FIELD_NUMBER = 4;
    private int height_;
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getHeight() {
      return height_;
    }
    
    // optional int32 direction = 5;
    public static final int DIRECTION_FIELD_NUMBER = 5;
    private int direction_;
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getDirection() {
      return direction_;
    }
    
    // optional int32 speed = 6;
    public static final int SPEED_FIELD_NUMBER = 6;
    private int speed_;
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getSpeed() {
      return speed_;
    }
    
    // optional int32 routeStartTime = 7;
    public static final int ROUTESTARTTIME_FIELD_NUMBER = 7;
    private int routeStartTime_;
    public boolean hasRouteStartTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getRouteStartTime() {
      return routeStartTime_;
    }
    
    // optional int32 routeEndTime = 8;
    public static final int ROUTEENDTIME_FIELD_NUMBER = 8;
    private int routeEndTime_;
    public boolean hasRouteEndTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public int getRouteEndTime() {
      return routeEndTime_;
    }
    
    // optional int32 driveCycleMileage = 9;
    public static final int DRIVECYCLEMILEAGE_FIELD_NUMBER = 9;
    private int driveCycleMileage_;
    public boolean hasDriveCycleMileage() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public int getDriveCycleMileage() {
      return driveCycleMileage_;
    }
    
    // optional int32 idlingMileage = 10;
    public static final int IDLINGMILEAGE_FIELD_NUMBER = 10;
    private int idlingMileage_;
    public boolean hasIdlingMileage() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public int getIdlingMileage() {
      return idlingMileage_;
    }
    
    // optional int32 paringRangeMileage = 11;
    public static final int PARINGRANGEMILEAGE_FIELD_NUMBER = 11;
    private int paringRangeMileage_;
    public boolean hasParingRangeMileage() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public int getParingRangeMileage() {
      return paringRangeMileage_;
    }
    
    // optional int32 parkingIdleTime = 12;
    public static final int PARKINGIDLETIME_FIELD_NUMBER = 12;
    private int parkingIdleTime_;
    public boolean hasParkingIdleTime() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public int getParkingIdleTime() {
      return parkingIdleTime_;
    }
    
    // optional int32 brakeNumber = 13;
    public static final int BRAKENUMBER_FIELD_NUMBER = 13;
    private int brakeNumber_;
    public boolean hasBrakeNumber() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public int getBrakeNumber() {
      return brakeNumber_;
    }
    
    // optional int32 cumulativeMileage = 14;
    public static final int CUMULATIVEMILEAGE_FIELD_NUMBER = 14;
    private int cumulativeMileage_;
    public boolean hasCumulativeMileage() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public int getCumulativeMileage() {
      return cumulativeMileage_;
    }
    
    // optional int32 brakingTime = 15;
    public static final int BRAKINGTIME_FIELD_NUMBER = 15;
    private int brakingTime_;
    public boolean hasBrakingTime() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    public int getBrakingTime() {
      return brakingTime_;
    }
    
    // optional int32 accelerationFrequency = 16;
    public static final int ACCELERATIONFREQUENCY_FIELD_NUMBER = 16;
    private int accelerationFrequency_;
    public boolean hasAccelerationFrequency() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    public int getAccelerationFrequency() {
      return accelerationFrequency_;
    }
    
    // optional int32 decelerationFrequency = 17;
    public static final int DECELERATIONFREQUENCY_FIELD_NUMBER = 17;
    private int decelerationFrequency_;
    public boolean hasDecelerationFrequency() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    public int getDecelerationFrequency() {
      return decelerationFrequency_;
    }
    
    // optional int32 vehicleEstimatedLoad = 18;
    public static final int VEHICLEESTIMATEDLOAD_FIELD_NUMBER = 18;
    private int vehicleEstimatedLoad_;
    public boolean hasVehicleEstimatedLoad() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    public int getVehicleEstimatedLoad() {
      return vehicleEstimatedLoad_;
    }
    
    // optional int32 initialTotalFuelConsumption = 19;
    public static final int INITIALTOTALFUELCONSUMPTION_FIELD_NUMBER = 19;
    private int initialTotalFuelConsumption_;
    public boolean hasInitialTotalFuelConsumption() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    public int getInitialTotalFuelConsumption() {
      return initialTotalFuelConsumption_;
    }
    
    // optional int32 terminationTotalFuelConsumption = 20;
    public static final int TERMINATIONTOTALFUELCONSUMPTION_FIELD_NUMBER = 20;
    private int terminationTotalFuelConsumption_;
    public boolean hasTerminationTotalFuelConsumption() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    public int getTerminationTotalFuelConsumption() {
      return terminationTotalFuelConsumption_;
    }
    
    // optional int32 cruiseRange = 21;
    public static final int CRUISERANGE_FIELD_NUMBER = 21;
    private int cruiseRange_;
    public boolean hasCruiseRange() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    public int getCruiseRange() {
      return cruiseRange_;
    }
    
    // optional int32 averageSpeedInterval = 22;
    public static final int AVERAGESPEEDINTERVAL_FIELD_NUMBER = 22;
    private int averageSpeedInterval_;
    public boolean hasAverageSpeedInterval() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    public int getAverageSpeedInterval() {
      return averageSpeedInterval_;
    }
    
    // optional int32 overSpeedTimes = 23;
    public static final int OVERSPEEDTIMES_FIELD_NUMBER = 23;
    private int overSpeedTimes_;
    public boolean hasOverSpeedTimes() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    public int getOverSpeedTimes() {
      return overSpeedTimes_;
    }
    
    private void initFields() {
      time_ = 0L;
      latitude_ = 0;
      longitude_ = 0;
      height_ = 0;
      direction_ = 0;
      speed_ = 0;
      routeStartTime_ = 0;
      routeEndTime_ = 0;
      driveCycleMileage_ = 0;
      idlingMileage_ = 0;
      paringRangeMileage_ = 0;
      parkingIdleTime_ = 0;
      brakeNumber_ = 0;
      cumulativeMileage_ = 0;
      brakingTime_ = 0;
      accelerationFrequency_ = 0;
      decelerationFrequency_ = 0;
      vehicleEstimatedLoad_ = 0;
      initialTotalFuelConsumption_ = 0;
      terminationTotalFuelConsumption_ = 0;
      cruiseRange_ = 0;
      averageSpeedInterval_ = 0;
      overSpeedTimes_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, longitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, height_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, direction_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, speed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, routeStartTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, routeEndTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, driveCycleMileage_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, idlingMileage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, paringRangeMileage_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, parkingIdleTime_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, brakeNumber_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, cumulativeMileage_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, brakingTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, accelerationFrequency_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, decelerationFrequency_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, vehicleEstimatedLoad_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, initialTotalFuelConsumption_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(20, terminationTotalFuelConsumption_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(21, cruiseRange_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(22, averageSpeedInterval_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(23, overSpeedTimes_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, longitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, height_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, direction_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, speed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, routeStartTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, routeEndTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, driveCycleMileage_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, idlingMileage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, paringRangeMileage_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, parkingIdleTime_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, brakeNumber_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, cumulativeMileage_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, brakingTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, accelerationFrequency_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, decelerationFrequency_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, vehicleEstimatedLoad_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, initialTotalFuelConsumption_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, terminationTotalFuelConsumption_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, cruiseRange_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, averageSpeedInterval_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, overSpeedTimes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.internal_static_StatisticData_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.internal_static_StatisticData_fieldAccessorTable;
      }
      
      // Construct using com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        time_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        direction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        speed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        routeStartTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        routeEndTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        driveCycleMileage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        idlingMileage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        paringRangeMileage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        parkingIdleTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        brakeNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        cumulativeMileage_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        brakingTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        accelerationFrequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        decelerationFrequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        vehicleEstimatedLoad_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        initialTotalFuelConsumption_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        terminationTotalFuelConsumption_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        cruiseRange_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        averageSpeedInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        overSpeedTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData.getDescriptor();
      }
      
      public com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData getDefaultInstanceForType() {
        return com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData.getDefaultInstance();
      }
      
      public com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData build() {
        com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData buildPartial() {
        com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData result = new com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.routeStartTime_ = routeStartTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.routeEndTime_ = routeEndTime_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.driveCycleMileage_ = driveCycleMileage_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.idlingMileage_ = idlingMileage_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.paringRangeMileage_ = paringRangeMileage_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.parkingIdleTime_ = parkingIdleTime_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.brakeNumber_ = brakeNumber_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.cumulativeMileage_ = cumulativeMileage_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.brakingTime_ = brakingTime_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.accelerationFrequency_ = accelerationFrequency_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.decelerationFrequency_ = decelerationFrequency_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.vehicleEstimatedLoad_ = vehicleEstimatedLoad_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.initialTotalFuelConsumption_ = initialTotalFuelConsumption_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.terminationTotalFuelConsumption_ = terminationTotalFuelConsumption_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.cruiseRange_ = cruiseRange_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.averageSpeedInterval_ = averageSpeedInterval_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.overSpeedTimes_ = overSpeedTimes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData) {
          return mergeFrom((com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData other) {
        if (other == com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData.getDefaultInstance()) return this;
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasRouteStartTime()) {
          setRouteStartTime(other.getRouteStartTime());
        }
        if (other.hasRouteEndTime()) {
          setRouteEndTime(other.getRouteEndTime());
        }
        if (other.hasDriveCycleMileage()) {
          setDriveCycleMileage(other.getDriveCycleMileage());
        }
        if (other.hasIdlingMileage()) {
          setIdlingMileage(other.getIdlingMileage());
        }
        if (other.hasParingRangeMileage()) {
          setParingRangeMileage(other.getParingRangeMileage());
        }
        if (other.hasParkingIdleTime()) {
          setParkingIdleTime(other.getParkingIdleTime());
        }
        if (other.hasBrakeNumber()) {
          setBrakeNumber(other.getBrakeNumber());
        }
        if (other.hasCumulativeMileage()) {
          setCumulativeMileage(other.getCumulativeMileage());
        }
        if (other.hasBrakingTime()) {
          setBrakingTime(other.getBrakingTime());
        }
        if (other.hasAccelerationFrequency()) {
          setAccelerationFrequency(other.getAccelerationFrequency());
        }
        if (other.hasDecelerationFrequency()) {
          setDecelerationFrequency(other.getDecelerationFrequency());
        }
        if (other.hasVehicleEstimatedLoad()) {
          setVehicleEstimatedLoad(other.getVehicleEstimatedLoad());
        }
        if (other.hasInitialTotalFuelConsumption()) {
          setInitialTotalFuelConsumption(other.getInitialTotalFuelConsumption());
        }
        if (other.hasTerminationTotalFuelConsumption()) {
          setTerminationTotalFuelConsumption(other.getTerminationTotalFuelConsumption());
        }
        if (other.hasCruiseRange()) {
          setCruiseRange(other.getCruiseRange());
        }
        if (other.hasAverageSpeedInterval()) {
          setAverageSpeedInterval(other.getAverageSpeedInterval());
        }
        if (other.hasOverSpeedTimes()) {
          setOverSpeedTimes(other.getOverSpeedTimes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasTime()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              time_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              latitude_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              longitude_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              height_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              direction_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              speed_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              routeStartTime_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              routeEndTime_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              driveCycleMileage_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              idlingMileage_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              paringRangeMileage_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              parkingIdleTime_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              brakeNumber_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              cumulativeMileage_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              brakingTime_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              accelerationFrequency_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              decelerationFrequency_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              vehicleEstimatedLoad_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              initialTotalFuelConsumption_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              terminationTotalFuelConsumption_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              cruiseRange_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              averageSpeedInterval_ = input.readInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              overSpeedTimes_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int64 time = 1;
      private long time_ ;
      public boolean hasTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public long getTime() {
        return time_;
      }
      public Builder setTime(long value) {
        bitField0_ |= 0x00000001;
        time_ = value;
        onChanged();
        return this;
      }
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int32 latitude = 2;
      private int latitude_ ;
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getLatitude() {
        return latitude_;
      }
      public Builder setLatitude(int value) {
        bitField0_ |= 0x00000002;
        latitude_ = value;
        onChanged();
        return this;
      }
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        latitude_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 longitude = 3;
      private int longitude_ ;
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getLongitude() {
        return longitude_;
      }
      public Builder setLongitude(int value) {
        bitField0_ |= 0x00000004;
        longitude_ = value;
        onChanged();
        return this;
      }
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        longitude_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 height = 4;
      private int height_ ;
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getHeight() {
        return height_;
      }
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000008;
        height_ = value;
        onChanged();
        return this;
      }
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 direction = 5;
      private int direction_ ;
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getDirection() {
        return direction_;
      }
      public Builder setDirection(int value) {
        bitField0_ |= 0x00000010;
        direction_ = value;
        onChanged();
        return this;
      }
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000010);
        direction_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 speed = 6;
      private int speed_ ;
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getSpeed() {
        return speed_;
      }
      public Builder setSpeed(int value) {
        bitField0_ |= 0x00000020;
        speed_ = value;
        onChanged();
        return this;
      }
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00000020);
        speed_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 routeStartTime = 7;
      private int routeStartTime_ ;
      public boolean hasRouteStartTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getRouteStartTime() {
        return routeStartTime_;
      }
      public Builder setRouteStartTime(int value) {
        bitField0_ |= 0x00000040;
        routeStartTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearRouteStartTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        routeStartTime_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 routeEndTime = 8;
      private int routeEndTime_ ;
      public boolean hasRouteEndTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public int getRouteEndTime() {
        return routeEndTime_;
      }
      public Builder setRouteEndTime(int value) {
        bitField0_ |= 0x00000080;
        routeEndTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearRouteEndTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        routeEndTime_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 driveCycleMileage = 9;
      private int driveCycleMileage_ ;
      public boolean hasDriveCycleMileage() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public int getDriveCycleMileage() {
        return driveCycleMileage_;
      }
      public Builder setDriveCycleMileage(int value) {
        bitField0_ |= 0x00000100;
        driveCycleMileage_ = value;
        onChanged();
        return this;
      }
      public Builder clearDriveCycleMileage() {
        bitField0_ = (bitField0_ & ~0x00000100);
        driveCycleMileage_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 idlingMileage = 10;
      private int idlingMileage_ ;
      public boolean hasIdlingMileage() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public int getIdlingMileage() {
        return idlingMileage_;
      }
      public Builder setIdlingMileage(int value) {
        bitField0_ |= 0x00000200;
        idlingMileage_ = value;
        onChanged();
        return this;
      }
      public Builder clearIdlingMileage() {
        bitField0_ = (bitField0_ & ~0x00000200);
        idlingMileage_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 paringRangeMileage = 11;
      private int paringRangeMileage_ ;
      public boolean hasParingRangeMileage() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public int getParingRangeMileage() {
        return paringRangeMileage_;
      }
      public Builder setParingRangeMileage(int value) {
        bitField0_ |= 0x00000400;
        paringRangeMileage_ = value;
        onChanged();
        return this;
      }
      public Builder clearParingRangeMileage() {
        bitField0_ = (bitField0_ & ~0x00000400);
        paringRangeMileage_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 parkingIdleTime = 12;
      private int parkingIdleTime_ ;
      public boolean hasParkingIdleTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public int getParkingIdleTime() {
        return parkingIdleTime_;
      }
      public Builder setParkingIdleTime(int value) {
        bitField0_ |= 0x00000800;
        parkingIdleTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearParkingIdleTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        parkingIdleTime_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 brakeNumber = 13;
      private int brakeNumber_ ;
      public boolean hasBrakeNumber() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public int getBrakeNumber() {
        return brakeNumber_;
      }
      public Builder setBrakeNumber(int value) {
        bitField0_ |= 0x00001000;
        brakeNumber_ = value;
        onChanged();
        return this;
      }
      public Builder clearBrakeNumber() {
        bitField0_ = (bitField0_ & ~0x00001000);
        brakeNumber_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 cumulativeMileage = 14;
      private int cumulativeMileage_ ;
      public boolean hasCumulativeMileage() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public int getCumulativeMileage() {
        return cumulativeMileage_;
      }
      public Builder setCumulativeMileage(int value) {
        bitField0_ |= 0x00002000;
        cumulativeMileage_ = value;
        onChanged();
        return this;
      }
      public Builder clearCumulativeMileage() {
        bitField0_ = (bitField0_ & ~0x00002000);
        cumulativeMileage_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 brakingTime = 15;
      private int brakingTime_ ;
      public boolean hasBrakingTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      public int getBrakingTime() {
        return brakingTime_;
      }
      public Builder setBrakingTime(int value) {
        bitField0_ |= 0x00004000;
        brakingTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearBrakingTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        brakingTime_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 accelerationFrequency = 16;
      private int accelerationFrequency_ ;
      public boolean hasAccelerationFrequency() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      public int getAccelerationFrequency() {
        return accelerationFrequency_;
      }
      public Builder setAccelerationFrequency(int value) {
        bitField0_ |= 0x00008000;
        accelerationFrequency_ = value;
        onChanged();
        return this;
      }
      public Builder clearAccelerationFrequency() {
        bitField0_ = (bitField0_ & ~0x00008000);
        accelerationFrequency_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 decelerationFrequency = 17;
      private int decelerationFrequency_ ;
      public boolean hasDecelerationFrequency() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      public int getDecelerationFrequency() {
        return decelerationFrequency_;
      }
      public Builder setDecelerationFrequency(int value) {
        bitField0_ |= 0x00010000;
        decelerationFrequency_ = value;
        onChanged();
        return this;
      }
      public Builder clearDecelerationFrequency() {
        bitField0_ = (bitField0_ & ~0x00010000);
        decelerationFrequency_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 vehicleEstimatedLoad = 18;
      private int vehicleEstimatedLoad_ ;
      public boolean hasVehicleEstimatedLoad() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      public int getVehicleEstimatedLoad() {
        return vehicleEstimatedLoad_;
      }
      public Builder setVehicleEstimatedLoad(int value) {
        bitField0_ |= 0x00020000;
        vehicleEstimatedLoad_ = value;
        onChanged();
        return this;
      }
      public Builder clearVehicleEstimatedLoad() {
        bitField0_ = (bitField0_ & ~0x00020000);
        vehicleEstimatedLoad_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 initialTotalFuelConsumption = 19;
      private int initialTotalFuelConsumption_ ;
      public boolean hasInitialTotalFuelConsumption() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      public int getInitialTotalFuelConsumption() {
        return initialTotalFuelConsumption_;
      }
      public Builder setInitialTotalFuelConsumption(int value) {
        bitField0_ |= 0x00040000;
        initialTotalFuelConsumption_ = value;
        onChanged();
        return this;
      }
      public Builder clearInitialTotalFuelConsumption() {
        bitField0_ = (bitField0_ & ~0x00040000);
        initialTotalFuelConsumption_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 terminationTotalFuelConsumption = 20;
      private int terminationTotalFuelConsumption_ ;
      public boolean hasTerminationTotalFuelConsumption() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      public int getTerminationTotalFuelConsumption() {
        return terminationTotalFuelConsumption_;
      }
      public Builder setTerminationTotalFuelConsumption(int value) {
        bitField0_ |= 0x00080000;
        terminationTotalFuelConsumption_ = value;
        onChanged();
        return this;
      }
      public Builder clearTerminationTotalFuelConsumption() {
        bitField0_ = (bitField0_ & ~0x00080000);
        terminationTotalFuelConsumption_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 cruiseRange = 21;
      private int cruiseRange_ ;
      public boolean hasCruiseRange() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      public int getCruiseRange() {
        return cruiseRange_;
      }
      public Builder setCruiseRange(int value) {
        bitField0_ |= 0x00100000;
        cruiseRange_ = value;
        onChanged();
        return this;
      }
      public Builder clearCruiseRange() {
        bitField0_ = (bitField0_ & ~0x00100000);
        cruiseRange_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 averageSpeedInterval = 22;
      private int averageSpeedInterval_ ;
      public boolean hasAverageSpeedInterval() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      public int getAverageSpeedInterval() {
        return averageSpeedInterval_;
      }
      public Builder setAverageSpeedInterval(int value) {
        bitField0_ |= 0x00200000;
        averageSpeedInterval_ = value;
        onChanged();
        return this;
      }
      public Builder clearAverageSpeedInterval() {
        bitField0_ = (bitField0_ & ~0x00200000);
        averageSpeedInterval_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 overSpeedTimes = 23;
      private int overSpeedTimes_ ;
      public boolean hasOverSpeedTimes() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      public int getOverSpeedTimes() {
        return overSpeedTimes_;
      }
      public Builder setOverSpeedTimes(int value) {
        bitField0_ |= 0x00400000;
        overSpeedTimes_ = value;
        onChanged();
        return this;
      }
      public Builder clearOverSpeedTimes() {
        bitField0_ = (bitField0_ & ~0x00400000);
        overSpeedTimes_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:StatisticData)
    }
    
    static {
      defaultInstance = new StatisticData(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:StatisticData)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_StatisticData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_StatisticData_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*core/proto/common/java/StatisticData.p" +
      "roto\"\303\004\n\rStatisticData\022\014\n\004time\030\001 \002(\003\022\020\n\010" +
      "latitude\030\002 \001(\005\022\021\n\tlongitude\030\003 \001(\005\022\016\n\006hei" +
      "ght\030\004 \001(\005\022\021\n\tdirection\030\005 \001(\005\022\r\n\005speed\030\006 " +
      "\001(\005\022\026\n\016routeStartTime\030\007 \001(\005\022\024\n\014routeEndT" +
      "ime\030\010 \001(\005\022\031\n\021driveCycleMileage\030\t \001(\005\022\025\n\r" +
      "idlingMileage\030\n \001(\005\022\032\n\022paringRangeMileag" +
      "e\030\013 \001(\005\022\027\n\017parkingIdleTime\030\014 \001(\005\022\023\n\013brak" +
      "eNumber\030\r \001(\005\022\031\n\021cumulativeMileage\030\016 \001(\005" +
      "\022\023\n\013brakingTime\030\017 \001(\005\022\035\n\025accelerationFre",
      "quency\030\020 \001(\005\022\035\n\025decelerationFrequency\030\021 " +
      "\001(\005\022\034\n\024vehicleEstimatedLoad\030\022 \001(\005\022#\n\033ini" +
      "tialTotalFuelConsumption\030\023 \001(\005\022\'\n\037termin" +
      "ationTotalFuelConsumption\030\024 \001(\005\022\023\n\013cruis" +
      "eRange\030\025 \001(\005\022\034\n\024averageSpeedInterval\030\026 \001" +
      "(\005\022\026\n\016overSpeedTimes\030\027 \001(\005BP\n5com.navinf" +
      "o.opentsp.platform.location.protocol.com" +
      "monB\027LCTerminalStatisticData"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_StatisticData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_StatisticData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_StatisticData_descriptor,
              new java.lang.String[] { "Time", "Latitude", "Longitude", "Height", "Direction", "Speed", "RouteStartTime", "RouteEndTime", "DriveCycleMileage", "IdlingMileage", "ParingRangeMileage", "ParkingIdleTime", "BrakeNumber", "CumulativeMileage", "BrakingTime", "AccelerationFrequency", "DecelerationFrequency", "VehicleEstimatedLoad", "InitialTotalFuelConsumption", "TerminationTotalFuelConsumption", "CruiseRange", "AverageSpeedInterval", "OverSpeedTimes", },
              com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData.class,
              com.navinfo.opentsp.platform.location.protocol.common.LCTerminalStatisticData.StatisticData.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
