// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace AeroCloud.Protocol {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class RegularData {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_RegularData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::AeroCloud.Protocol.RegularData, global::AeroCloud.Protocol.RegularData.Builder> internal__static_RegularData__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static RegularData() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CjJjb3JlL3Byb3RvL2RhdGFhY2Nlc3MvY29tbW9uL25ldC9SZWd1bGFyRGF0" + 
            "YS5wcm90bxoUY3NoYXJwX29wdGlvbnMucHJvdG8aJ2NvcmUvcHJvdG8vY29t" + 
            "bW9uL25ldC9SZWd1bGFyQ29kZS5wcm90bxozY29yZS9wcm90by9kYXRhYWNj" + 
            "ZXNzL2NvbW1vbi9uZXQvQXJlYVNwZWVkaW5nLnByb3RvGjBjb3JlL3Byb3Rv" + 
            "L2RhdGFhY2Nlc3MvY29tbW9uL25ldC9Jbk91dEFyZWEucHJvdG8aNmNvcmUv" + 
            "cHJvdG8vZGF0YWFjY2Vzcy9jb21tb24vbmV0L1JvdXRlRHJpdmVyVGltZS5w" + 
            "cm90bxo0Y29yZS9wcm90by9kYXRhYWNjZXNzL2NvbW1vbi9uZXQvRHJpdmVy" + 
            "Tm90Q2FyZC5wcm90bxo2Y29yZS9wcm90by9kYXRhYWNjZXNzL2NvbW1vbi9u" + 
            "ZXQvRG9vck9wZW5PdXRBcmVhLnByb3RvGjFjb3JlL3Byb3RvL2RhdGFhY2Nl" + 
            "c3MvY29tbW9uL25ldC9Ecml2aW5nQmFuLnByb3RvIrUCCgtSZWd1bGFyRGF0" + 
            "YRISCgp0ZXJtaW5hbElkGAEgAigDEiEKC3JlZ3VsYXJDb2RlGAIgAigOMgwu" + 
            "UmVndWxhckNvZGUSFgoObGFzdE1vZGlmeURhdGUYAyACKAMSHwoIc3BlZWRp" + 
            "bmcYBCABKAsyDS5BcmVhU3BlZWRpbmcSHQoJaW5PdXRBcmVhGAUgASgLMgou" + 
            "SW5PdXRBcmVhEiQKCmRyaXZlclRpbWUYBiABKAsyEC5Sb3V0ZURyaXZlclRp" + 
            "bWUSJQoNZHJpdmVyTm90Q2FyZBgHIAEoCzIOLkRyaXZlck5vdENhcmQSKQoP" + 
            "ZG9vck9wZW5PdXRBcmVhGAggASgLMhAuRG9vck9wZW5PdXRBcmVhEh8KCmRy" + 
            "aXZpbmdCYW4YCSABKAsyCy5Ecml2aW5nQmFuQk4KJmNvbS5sYy5jb3JlLnBy" + 
            "b3RvY29sLmRhdGFhY2Nlc3MuY29tbW9uQg1MQ1JlZ3VsYXJEYXRhwj4UChJB" + 
            "ZXJvQ2xvdWQuUHJvdG9jb2w=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_RegularData__Descriptor = Descriptor.MessageTypes[0];
          internal__static_RegularData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::AeroCloud.Protocol.RegularData, global::AeroCloud.Protocol.RegularData.Builder>(internal__static_RegularData__Descriptor,
                  new string[] { "TerminalId", "RegularCode", "LastModifyDate", "Speeding", "InOutArea", "DriverTime", "DriverNotCard", "DoorOpenOutArea", "DrivingBan", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.RegularCode.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.AreaSpeeding.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.InOutArea.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.RouteDriverTime.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.DriverNotCard.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.DoorOpenOutArea.RegisterAllExtensions(registry);
          global::AeroCloud.Protocol.Proto.DrivingBan.RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
            global::AeroCloud.Protocol.Proto.RegularCode.Descriptor, 
            global::AeroCloud.Protocol.Proto.AreaSpeeding.Descriptor, 
            global::AeroCloud.Protocol.Proto.InOutArea.Descriptor, 
            global::AeroCloud.Protocol.Proto.RouteDriverTime.Descriptor, 
            global::AeroCloud.Protocol.Proto.DriverNotCard.Descriptor, 
            global::AeroCloud.Protocol.Proto.DoorOpenOutArea.Descriptor, 
            global::AeroCloud.Protocol.Proto.DrivingBan.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RegularData : pb::GeneratedMessage<RegularData, RegularData.Builder> {
    private RegularData() { }
    private static readonly RegularData defaultInstance = new RegularData().MakeReadOnly();
    private static readonly string[] _regularDataFieldNames = new string[] { "doorOpenOutArea", "driverNotCard", "driverTime", "drivingBan", "inOutArea", "lastModifyDate", "regularCode", "speeding", "terminalId" };
    private static readonly uint[] _regularDataFieldTags = new uint[] { 66, 58, 50, 74, 42, 24, 16, 34, 8 };
    public static RegularData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegularData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegularData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::AeroCloud.Protocol.Proto.RegularData.internal__static_RegularData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegularData, RegularData.Builder> InternalFieldAccessors {
      get { return global::AeroCloud.Protocol.Proto.RegularData.internal__static_RegularData__FieldAccessorTable; }
    }
    
    public const int TerminalIdFieldNumber = 1;
    private bool hasTerminalId;
    private long terminalId_;
    public bool HasTerminalId {
      get { return hasTerminalId; }
    }
    public long TerminalId {
      get { return terminalId_; }
    }
    
    public const int RegularCodeFieldNumber = 2;
    private bool hasRegularCode;
    private global::AeroCloud.Protocol.RegularCode regularCode_ = global::AeroCloud.Protocol.RegularCode.speeding;
    public bool HasRegularCode {
      get { return hasRegularCode; }
    }
    public global::AeroCloud.Protocol.RegularCode RegularCode {
      get { return regularCode_; }
    }
    
    public const int LastModifyDateFieldNumber = 3;
    private bool hasLastModifyDate;
    private long lastModifyDate_;
    public bool HasLastModifyDate {
      get { return hasLastModifyDate; }
    }
    public long LastModifyDate {
      get { return lastModifyDate_; }
    }
    
    public const int SpeedingFieldNumber = 4;
    private bool hasSpeeding;
    private global::AeroCloud.Protocol.AreaSpeeding speeding_;
    public bool HasSpeeding {
      get { return hasSpeeding; }
    }
    public global::AeroCloud.Protocol.AreaSpeeding Speeding {
      get { return speeding_ ?? global::AeroCloud.Protocol.AreaSpeeding.DefaultInstance; }
    }
    
    public const int InOutAreaFieldNumber = 5;
    private bool hasInOutArea;
    private global::AeroCloud.Protocol.InOutArea inOutArea_;
    public bool HasInOutArea {
      get { return hasInOutArea; }
    }
    public global::AeroCloud.Protocol.InOutArea InOutArea {
      get { return inOutArea_ ?? global::AeroCloud.Protocol.InOutArea.DefaultInstance; }
    }
    
    public const int DriverTimeFieldNumber = 6;
    private bool hasDriverTime;
    private global::AeroCloud.Protocol.RouteDriverTime driverTime_;
    public bool HasDriverTime {
      get { return hasDriverTime; }
    }
    public global::AeroCloud.Protocol.RouteDriverTime DriverTime {
      get { return driverTime_ ?? global::AeroCloud.Protocol.RouteDriverTime.DefaultInstance; }
    }
    
    public const int DriverNotCardFieldNumber = 7;
    private bool hasDriverNotCard;
    private global::AeroCloud.Protocol.DriverNotCard driverNotCard_;
    public bool HasDriverNotCard {
      get { return hasDriverNotCard; }
    }
    public global::AeroCloud.Protocol.DriverNotCard DriverNotCard {
      get { return driverNotCard_ ?? global::AeroCloud.Protocol.DriverNotCard.DefaultInstance; }
    }
    
    public const int DoorOpenOutAreaFieldNumber = 8;
    private bool hasDoorOpenOutArea;
    private global::AeroCloud.Protocol.DoorOpenOutArea doorOpenOutArea_;
    public bool HasDoorOpenOutArea {
      get { return hasDoorOpenOutArea; }
    }
    public global::AeroCloud.Protocol.DoorOpenOutArea DoorOpenOutArea {
      get { return doorOpenOutArea_ ?? global::AeroCloud.Protocol.DoorOpenOutArea.DefaultInstance; }
    }
    
    public const int DrivingBanFieldNumber = 9;
    private bool hasDrivingBan;
    private global::AeroCloud.Protocol.DrivingBan drivingBan_;
    public bool HasDrivingBan {
      get { return hasDrivingBan; }
    }
    public global::AeroCloud.Protocol.DrivingBan DrivingBan {
      get { return drivingBan_ ?? global::AeroCloud.Protocol.DrivingBan.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTerminalId) return false;
        if (!hasRegularCode) return false;
        if (!hasLastModifyDate) return false;
        if (HasSpeeding) {
          if (!Speeding.IsInitialized) return false;
        }
        if (HasInOutArea) {
          if (!InOutArea.IsInitialized) return false;
        }
        if (HasDriverTime) {
          if (!DriverTime.IsInitialized) return false;
        }
        if (HasDriverNotCard) {
          if (!DriverNotCard.IsInitialized) return false;
        }
        if (HasDoorOpenOutArea) {
          if (!DoorOpenOutArea.IsInitialized) return false;
        }
        if (HasDrivingBan) {
          if (!DrivingBan.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _regularDataFieldNames;
      if (hasTerminalId) {
        output.WriteInt64(1, field_names[8], TerminalId);
      }
      if (hasRegularCode) {
        output.WriteEnum(2, field_names[6], (int) RegularCode, RegularCode);
      }
      if (hasLastModifyDate) {
        output.WriteInt64(3, field_names[5], LastModifyDate);
      }
      if (hasSpeeding) {
        output.WriteMessage(4, field_names[7], Speeding);
      }
      if (hasInOutArea) {
        output.WriteMessage(5, field_names[4], InOutArea);
      }
      if (hasDriverTime) {
        output.WriteMessage(6, field_names[2], DriverTime);
      }
      if (hasDriverNotCard) {
        output.WriteMessage(7, field_names[1], DriverNotCard);
      }
      if (hasDoorOpenOutArea) {
        output.WriteMessage(8, field_names[0], DoorOpenOutArea);
      }
      if (hasDrivingBan) {
        output.WriteMessage(9, field_names[3], DrivingBan);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTerminalId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, TerminalId);
        }
        if (hasRegularCode) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) RegularCode);
        }
        if (hasLastModifyDate) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, LastModifyDate);
        }
        if (hasSpeeding) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Speeding);
        }
        if (hasInOutArea) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, InOutArea);
        }
        if (hasDriverTime) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, DriverTime);
        }
        if (hasDriverNotCard) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, DriverNotCard);
        }
        if (hasDoorOpenOutArea) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, DoorOpenOutArea);
        }
        if (hasDrivingBan) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, DrivingBan);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegularData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegularData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegularData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegularData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegularData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegularData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegularData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegularData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegularData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegularData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegularData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegularData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RegularData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegularData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegularData result;
      
      private RegularData PrepareBuilder() {
        if (resultIsReadOnly) {
          RegularData original = result;
          result = new RegularData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegularData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::AeroCloud.Protocol.RegularData.Descriptor; }
      }
      
      public override RegularData DefaultInstanceForType {
        get { return global::AeroCloud.Protocol.RegularData.DefaultInstance; }
      }
      
      public override RegularData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegularData) {
          return MergeFrom((RegularData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegularData other) {
        if (other == global::AeroCloud.Protocol.RegularData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTerminalId) {
          TerminalId = other.TerminalId;
        }
        if (other.HasRegularCode) {
          RegularCode = other.RegularCode;
        }
        if (other.HasLastModifyDate) {
          LastModifyDate = other.LastModifyDate;
        }
        if (other.HasSpeeding) {
          MergeSpeeding(other.Speeding);
        }
        if (other.HasInOutArea) {
          MergeInOutArea(other.InOutArea);
        }
        if (other.HasDriverTime) {
          MergeDriverTime(other.DriverTime);
        }
        if (other.HasDriverNotCard) {
          MergeDriverNotCard(other.DriverNotCard);
        }
        if (other.HasDoorOpenOutArea) {
          MergeDoorOpenOutArea(other.DoorOpenOutArea);
        }
        if (other.HasDrivingBan) {
          MergeDrivingBan(other.DrivingBan);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_regularDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _regularDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTerminalId = input.ReadInt64(ref result.terminalId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.regularCode_, out unknown)) {
                result.hasRegularCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasLastModifyDate = input.ReadInt64(ref result.lastModifyDate_);
              break;
            }
            case 34: {
              global::AeroCloud.Protocol.AreaSpeeding.Builder subBuilder = global::AeroCloud.Protocol.AreaSpeeding.CreateBuilder();
              if (result.hasSpeeding) {
                subBuilder.MergeFrom(Speeding);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Speeding = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::AeroCloud.Protocol.InOutArea.Builder subBuilder = global::AeroCloud.Protocol.InOutArea.CreateBuilder();
              if (result.hasInOutArea) {
                subBuilder.MergeFrom(InOutArea);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InOutArea = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::AeroCloud.Protocol.RouteDriverTime.Builder subBuilder = global::AeroCloud.Protocol.RouteDriverTime.CreateBuilder();
              if (result.hasDriverTime) {
                subBuilder.MergeFrom(DriverTime);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DriverTime = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::AeroCloud.Protocol.DriverNotCard.Builder subBuilder = global::AeroCloud.Protocol.DriverNotCard.CreateBuilder();
              if (result.hasDriverNotCard) {
                subBuilder.MergeFrom(DriverNotCard);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DriverNotCard = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::AeroCloud.Protocol.DoorOpenOutArea.Builder subBuilder = global::AeroCloud.Protocol.DoorOpenOutArea.CreateBuilder();
              if (result.hasDoorOpenOutArea) {
                subBuilder.MergeFrom(DoorOpenOutArea);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DoorOpenOutArea = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::AeroCloud.Protocol.DrivingBan.Builder subBuilder = global::AeroCloud.Protocol.DrivingBan.CreateBuilder();
              if (result.hasDrivingBan) {
                subBuilder.MergeFrom(DrivingBan);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DrivingBan = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTerminalId {
        get { return result.hasTerminalId; }
      }
      public long TerminalId {
        get { return result.TerminalId; }
        set { SetTerminalId(value); }
      }
      public Builder SetTerminalId(long value) {
        PrepareBuilder();
        result.hasTerminalId = true;
        result.terminalId_ = value;
        return this;
      }
      public Builder ClearTerminalId() {
        PrepareBuilder();
        result.hasTerminalId = false;
        result.terminalId_ = 0L;
        return this;
      }
      
      public bool HasRegularCode {
       get { return result.hasRegularCode; }
      }
      public global::AeroCloud.Protocol.RegularCode RegularCode {
        get { return result.RegularCode; }
        set { SetRegularCode(value); }
      }
      public Builder SetRegularCode(global::AeroCloud.Protocol.RegularCode value) {
        PrepareBuilder();
        result.hasRegularCode = true;
        result.regularCode_ = value;
        return this;
      }
      public Builder ClearRegularCode() {
        PrepareBuilder();
        result.hasRegularCode = false;
        result.regularCode_ = global::AeroCloud.Protocol.RegularCode.speeding;
        return this;
      }
      
      public bool HasLastModifyDate {
        get { return result.hasLastModifyDate; }
      }
      public long LastModifyDate {
        get { return result.LastModifyDate; }
        set { SetLastModifyDate(value); }
      }
      public Builder SetLastModifyDate(long value) {
        PrepareBuilder();
        result.hasLastModifyDate = true;
        result.lastModifyDate_ = value;
        return this;
      }
      public Builder ClearLastModifyDate() {
        PrepareBuilder();
        result.hasLastModifyDate = false;
        result.lastModifyDate_ = 0L;
        return this;
      }
      
      public bool HasSpeeding {
       get { return result.hasSpeeding; }
      }
      public global::AeroCloud.Protocol.AreaSpeeding Speeding {
        get { return result.Speeding; }
        set { SetSpeeding(value); }
      }
      public Builder SetSpeeding(global::AeroCloud.Protocol.AreaSpeeding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpeeding = true;
        result.speeding_ = value;
        return this;
      }
      public Builder SetSpeeding(global::AeroCloud.Protocol.AreaSpeeding.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpeeding = true;
        result.speeding_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpeeding(global::AeroCloud.Protocol.AreaSpeeding value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpeeding &&
            result.speeding_ != global::AeroCloud.Protocol.AreaSpeeding.DefaultInstance) {
            result.speeding_ = global::AeroCloud.Protocol.AreaSpeeding.CreateBuilder(result.speeding_).MergeFrom(value).BuildPartial();
        } else {
          result.speeding_ = value;
        }
        result.hasSpeeding = true;
        return this;
      }
      public Builder ClearSpeeding() {
        PrepareBuilder();
        result.hasSpeeding = false;
        result.speeding_ = null;
        return this;
      }
      
      public bool HasInOutArea {
       get { return result.hasInOutArea; }
      }
      public global::AeroCloud.Protocol.InOutArea InOutArea {
        get { return result.InOutArea; }
        set { SetInOutArea(value); }
      }
      public Builder SetInOutArea(global::AeroCloud.Protocol.InOutArea value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInOutArea = true;
        result.inOutArea_ = value;
        return this;
      }
      public Builder SetInOutArea(global::AeroCloud.Protocol.InOutArea.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInOutArea = true;
        result.inOutArea_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInOutArea(global::AeroCloud.Protocol.InOutArea value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInOutArea &&
            result.inOutArea_ != global::AeroCloud.Protocol.InOutArea.DefaultInstance) {
            result.inOutArea_ = global::AeroCloud.Protocol.InOutArea.CreateBuilder(result.inOutArea_).MergeFrom(value).BuildPartial();
        } else {
          result.inOutArea_ = value;
        }
        result.hasInOutArea = true;
        return this;
      }
      public Builder ClearInOutArea() {
        PrepareBuilder();
        result.hasInOutArea = false;
        result.inOutArea_ = null;
        return this;
      }
      
      public bool HasDriverTime {
       get { return result.hasDriverTime; }
      }
      public global::AeroCloud.Protocol.RouteDriverTime DriverTime {
        get { return result.DriverTime; }
        set { SetDriverTime(value); }
      }
      public Builder SetDriverTime(global::AeroCloud.Protocol.RouteDriverTime value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDriverTime = true;
        result.driverTime_ = value;
        return this;
      }
      public Builder SetDriverTime(global::AeroCloud.Protocol.RouteDriverTime.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDriverTime = true;
        result.driverTime_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDriverTime(global::AeroCloud.Protocol.RouteDriverTime value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDriverTime &&
            result.driverTime_ != global::AeroCloud.Protocol.RouteDriverTime.DefaultInstance) {
            result.driverTime_ = global::AeroCloud.Protocol.RouteDriverTime.CreateBuilder(result.driverTime_).MergeFrom(value).BuildPartial();
        } else {
          result.driverTime_ = value;
        }
        result.hasDriverTime = true;
        return this;
      }
      public Builder ClearDriverTime() {
        PrepareBuilder();
        result.hasDriverTime = false;
        result.driverTime_ = null;
        return this;
      }
      
      public bool HasDriverNotCard {
       get { return result.hasDriverNotCard; }
      }
      public global::AeroCloud.Protocol.DriverNotCard DriverNotCard {
        get { return result.DriverNotCard; }
        set { SetDriverNotCard(value); }
      }
      public Builder SetDriverNotCard(global::AeroCloud.Protocol.DriverNotCard value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDriverNotCard = true;
        result.driverNotCard_ = value;
        return this;
      }
      public Builder SetDriverNotCard(global::AeroCloud.Protocol.DriverNotCard.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDriverNotCard = true;
        result.driverNotCard_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDriverNotCard(global::AeroCloud.Protocol.DriverNotCard value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDriverNotCard &&
            result.driverNotCard_ != global::AeroCloud.Protocol.DriverNotCard.DefaultInstance) {
            result.driverNotCard_ = global::AeroCloud.Protocol.DriverNotCard.CreateBuilder(result.driverNotCard_).MergeFrom(value).BuildPartial();
        } else {
          result.driverNotCard_ = value;
        }
        result.hasDriverNotCard = true;
        return this;
      }
      public Builder ClearDriverNotCard() {
        PrepareBuilder();
        result.hasDriverNotCard = false;
        result.driverNotCard_ = null;
        return this;
      }
      
      public bool HasDoorOpenOutArea {
       get { return result.hasDoorOpenOutArea; }
      }
      public global::AeroCloud.Protocol.DoorOpenOutArea DoorOpenOutArea {
        get { return result.DoorOpenOutArea; }
        set { SetDoorOpenOutArea(value); }
      }
      public Builder SetDoorOpenOutArea(global::AeroCloud.Protocol.DoorOpenOutArea value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDoorOpenOutArea = true;
        result.doorOpenOutArea_ = value;
        return this;
      }
      public Builder SetDoorOpenOutArea(global::AeroCloud.Protocol.DoorOpenOutArea.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDoorOpenOutArea = true;
        result.doorOpenOutArea_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDoorOpenOutArea(global::AeroCloud.Protocol.DoorOpenOutArea value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDoorOpenOutArea &&
            result.doorOpenOutArea_ != global::AeroCloud.Protocol.DoorOpenOutArea.DefaultInstance) {
            result.doorOpenOutArea_ = global::AeroCloud.Protocol.DoorOpenOutArea.CreateBuilder(result.doorOpenOutArea_).MergeFrom(value).BuildPartial();
        } else {
          result.doorOpenOutArea_ = value;
        }
        result.hasDoorOpenOutArea = true;
        return this;
      }
      public Builder ClearDoorOpenOutArea() {
        PrepareBuilder();
        result.hasDoorOpenOutArea = false;
        result.doorOpenOutArea_ = null;
        return this;
      }
      
      public bool HasDrivingBan {
       get { return result.hasDrivingBan; }
      }
      public global::AeroCloud.Protocol.DrivingBan DrivingBan {
        get { return result.DrivingBan; }
        set { SetDrivingBan(value); }
      }
      public Builder SetDrivingBan(global::AeroCloud.Protocol.DrivingBan value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrivingBan = true;
        result.drivingBan_ = value;
        return this;
      }
      public Builder SetDrivingBan(global::AeroCloud.Protocol.DrivingBan.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDrivingBan = true;
        result.drivingBan_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDrivingBan(global::AeroCloud.Protocol.DrivingBan value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDrivingBan &&
            result.drivingBan_ != global::AeroCloud.Protocol.DrivingBan.DefaultInstance) {
            result.drivingBan_ = global::AeroCloud.Protocol.DrivingBan.CreateBuilder(result.drivingBan_).MergeFrom(value).BuildPartial();
        } else {
          result.drivingBan_ = value;
        }
        result.hasDrivingBan = true;
        return this;
      }
      public Builder ClearDrivingBan() {
        PrepareBuilder();
        result.hasDrivingBan = false;
        result.drivingBan_ = null;
        return this;
      }
    }
    static RegularData() {
      object.ReferenceEquals(global::AeroCloud.Protocol.Proto.RegularData.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
