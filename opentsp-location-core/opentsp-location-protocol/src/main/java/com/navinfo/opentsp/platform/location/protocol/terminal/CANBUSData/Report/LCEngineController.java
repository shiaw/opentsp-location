// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/terminal/CANBUSData/Report/EngineController.proto

package com.navinfo.opentsp.platform.location.protocol.terminal.CANBUSData.Report;

public final class LCEngineController {
  private LCEngineController() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum SpeedLimitStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    activeSpeedLimit(0, 0),
    notActiveSpeedLimit(1, 1),
    errorSpeedLimit(2, 2),
    notAvailableSpeedLimit(3, 3),
    ;
    
    public static final int activeSpeedLimit_VALUE = 0;
    public static final int notActiveSpeedLimit_VALUE = 1;
    public static final int errorSpeedLimit_VALUE = 2;
    public static final int notAvailableSpeedLimit_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static SpeedLimitStatus valueOf(int value) {
      switch (value) {
        case 0: return activeSpeedLimit;
        case 1: return notActiveSpeedLimit;
        case 2: return errorSpeedLimit;
        case 3: return notAvailableSpeedLimit;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SpeedLimitStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SpeedLimitStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpeedLimitStatus>() {
            public SpeedLimitStatus findValueByNumber(int number) {
              return SpeedLimitStatus.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return LCEngineController.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final SpeedLimitStatus[] VALUES = {
      activeSpeedLimit, notActiveSpeedLimit, errorSpeedLimit, notAvailableSpeedLimit, 
    };
    
    public static SpeedLimitStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private SpeedLimitStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:SpeedLimitStatus)
  }
  
  public enum PedalSwitch
      implements com.google.protobuf.ProtocolMessageEnum {
    kickDownNotActive(0, 0),
    kickDownActive(1, 1),
    notAvailablePedal(2, 3),
    ;
    
    public static final int kickDownNotActive_VALUE = 0;
    public static final int kickDownActive_VALUE = 1;
    public static final int notAvailablePedal_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static PedalSwitch valueOf(int value) {
      switch (value) {
        case 0: return kickDownNotActive;
        case 1: return kickDownActive;
        case 3: return notAvailablePedal;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<PedalSwitch>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PedalSwitch>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PedalSwitch>() {
            public PedalSwitch findValueByNumber(int number) {
              return PedalSwitch.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return LCEngineController.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final PedalSwitch[] VALUES = {
      kickDownNotActive, kickDownActive, notAvailablePedal, 
    };
    
    public static PedalSwitch valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private PedalSwitch(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:PedalSwitch)
  }
  
  public enum AcceleratorPedalSwitch
      implements com.google.protobuf.ProtocolMessageEnum {
    lowIdleSwitchSignalNotActive(0, 0),
    lowIdleSwitchSignalActive(1, 1),
    errorAccelerator(2, 2),
    notAvailableAccelerator(3, 3),
    ;
    
    public static final int lowIdleSwitchSignalNotActive_VALUE = 0;
    public static final int lowIdleSwitchSignalActive_VALUE = 1;
    public static final int errorAccelerator_VALUE = 2;
    public static final int notAvailableAccelerator_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static AcceleratorPedalSwitch valueOf(int value) {
      switch (value) {
        case 0: return lowIdleSwitchSignalNotActive;
        case 1: return lowIdleSwitchSignalActive;
        case 2: return errorAccelerator;
        case 3: return notAvailableAccelerator;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<AcceleratorPedalSwitch>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AcceleratorPedalSwitch>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AcceleratorPedalSwitch>() {
            public AcceleratorPedalSwitch findValueByNumber(int number) {
              return AcceleratorPedalSwitch.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return LCEngineController.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final AcceleratorPedalSwitch[] VALUES = {
      lowIdleSwitchSignalNotActive, lowIdleSwitchSignalActive, errorAccelerator, notAvailableAccelerator, 
    };
    
    public static AcceleratorPedalSwitch valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private AcceleratorPedalSwitch(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:AcceleratorPedalSwitch)
  }
  
  public enum TreatmentStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    notExceedDewPoint(0, 0),
    exceedDewPoint(1, 1),
    errorTreatment(2, 2),
    notAvailableTreatment(3, 3),
    ;
    
    public static final int notExceedDewPoint_VALUE = 0;
    public static final int exceedDewPoint_VALUE = 1;
    public static final int errorTreatment_VALUE = 2;
    public static final int notAvailableTreatment_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static TreatmentStatus valueOf(int value) {
      switch (value) {
        case 0: return notExceedDewPoint;
        case 1: return exceedDewPoint;
        case 2: return errorTreatment;
        case 3: return notAvailableTreatment;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<TreatmentStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TreatmentStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TreatmentStatus>() {
            public TreatmentStatus findValueByNumber(int number) {
              return TreatmentStatus.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return LCEngineController.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final TreatmentStatus[] VALUES = {
      notExceedDewPoint, exceedDewPoint, errorTreatment, notAvailableTreatment, 
    };
    
    public static TreatmentStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private TreatmentStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:TreatmentStatus)
  }
  
  public interface EngineControllerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional float enginePercentTorque = 1;
    boolean hasEnginePercentTorque();
    float getEnginePercentTorque();
    
    // optional int32 torqueMode = 2;
    boolean hasTorqueMode();
    int getTorqueMode();
    
    // optional int32 driverPercentTorque = 3;
    boolean hasDriverPercentTorque();
    int getDriverPercentTorque();
    
    // optional int32 engineSpeed = 4;
    boolean hasEngineSpeed();
    int getEngineSpeed();
    
    // optional int32 engineControlAddress = 5;
    boolean hasEngineControlAddress();
    int getEngineControlAddress();
    
    // optional int32 engineStartMode = 6;
    boolean hasEngineStartMode();
    int getEngineStartMode();
    
    // optional int32 demandPercentTorque = 7;
    boolean hasDemandPercentTorque();
    int getDemandPercentTorque();
    
    // optional .SpeedLimitStatus status = 8;
    boolean hasStatus();
    SpeedLimitStatus getStatus();
    
    // optional .PedalSwitch pedalSwitch = 9;
    boolean hasPedalSwitch();
    PedalSwitch getPedalSwitch();
    
    // optional .AcceleratorPedalSwitch aPedalSwitch = 10;
    boolean hasAPedalSwitch();
    AcceleratorPedalSwitch getAPedalSwitch();
    
    // optional float aPedalPosition = 11;
    boolean hasAPedalPosition();
    float getAPedalPosition();
    
    // optional int32 loadPercent = 12;
    boolean hasLoadPercent();
    int getLoadPercent();
    
    // optional int32 remoteAcceleratorPosition01 = 13;
    boolean hasRemoteAcceleratorPosition01();
    int getRemoteAcceleratorPosition01();
    
    // optional int32 remoteAcceleratorPosition02 = 14;
    boolean hasRemoteAcceleratorPosition02();
    int getRemoteAcceleratorPosition02();
    
    // optional int32 maxTorquePercent = 15;
    boolean hasMaxTorquePercent();
    int getMaxTorquePercent();
    
    // optional int32 frictionTorquePercent = 16;
    boolean hasFrictionTorquePercent();
    int getFrictionTorquePercent();
    
    // optional float engineDesiredSpeed = 17;
    boolean hasEngineDesiredSpeed();
    float getEngineDesiredSpeed();
    
    // optional int32 engineAsymmetryAdjustment = 18;
    boolean hasEngineAsymmetryAdjustment();
    int getEngineAsymmetryAdjustment();
    
    // optional int32 engineLossesPercent = 19;
    boolean hasEngineLossesPercent();
    int getEngineLossesPercent();
    
    // optional float exhaustGas = 20;
    boolean hasExhaustGas();
    float getExhaustGas();
    
    // repeated .TreatmentStatus intakeStatus = 21;
    java.util.List<TreatmentStatus> getIntakeStatusList();
    int getIntakeStatusCount();
    TreatmentStatus getIntakeStatus(int index);
    
    // repeated .TreatmentStatus exhaustStatus = 22;
    java.util.List<TreatmentStatus> getExhaustStatusList();
    int getExhaustStatusCount();
    TreatmentStatus getExhaustStatus(int index);
  }
  public static final class EngineController extends
      com.google.protobuf.GeneratedMessage
      implements EngineControllerOrBuilder {
    // Use EngineController.newBuilder() to construct.
    private EngineController(Builder builder) {
      super(builder);
    }
    private EngineController(boolean noInit) {}
    
    private static final EngineController defaultInstance;
    public static EngineController getDefaultInstance() {
      return defaultInstance;
    }
    
    public EngineController getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LCEngineController.internal_static_EngineController_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LCEngineController.internal_static_EngineController_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional float enginePercentTorque = 1;
    public static final int ENGINEPERCENTTORQUE_FIELD_NUMBER = 1;
    private float enginePercentTorque_;
    public boolean hasEnginePercentTorque() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getEnginePercentTorque() {
      return enginePercentTorque_;
    }
    
    // optional int32 torqueMode = 2;
    public static final int TORQUEMODE_FIELD_NUMBER = 2;
    private int torqueMode_;
    public boolean hasTorqueMode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getTorqueMode() {
      return torqueMode_;
    }
    
    // optional int32 driverPercentTorque = 3;
    public static final int DRIVERPERCENTTORQUE_FIELD_NUMBER = 3;
    private int driverPercentTorque_;
    public boolean hasDriverPercentTorque() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getDriverPercentTorque() {
      return driverPercentTorque_;
    }
    
    // optional int32 engineSpeed = 4;
    public static final int ENGINESPEED_FIELD_NUMBER = 4;
    private int engineSpeed_;
    public boolean hasEngineSpeed() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getEngineSpeed() {
      return engineSpeed_;
    }
    
    // optional int32 engineControlAddress = 5;
    public static final int ENGINECONTROLADDRESS_FIELD_NUMBER = 5;
    private int engineControlAddress_;
    public boolean hasEngineControlAddress() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getEngineControlAddress() {
      return engineControlAddress_;
    }
    
    // optional int32 engineStartMode = 6;
    public static final int ENGINESTARTMODE_FIELD_NUMBER = 6;
    private int engineStartMode_;
    public boolean hasEngineStartMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getEngineStartMode() {
      return engineStartMode_;
    }
    
    // optional int32 demandPercentTorque = 7;
    public static final int DEMANDPERCENTTORQUE_FIELD_NUMBER = 7;
    private int demandPercentTorque_;
    public boolean hasDemandPercentTorque() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getDemandPercentTorque() {
      return demandPercentTorque_;
    }
    
    // optional .SpeedLimitStatus status = 8;
    public static final int STATUS_FIELD_NUMBER = 8;
    private SpeedLimitStatus status_;
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public SpeedLimitStatus getStatus() {
      return status_;
    }
    
    // optional .PedalSwitch pedalSwitch = 9;
    public static final int PEDALSWITCH_FIELD_NUMBER = 9;
    private PedalSwitch pedalSwitch_;
    public boolean hasPedalSwitch() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public PedalSwitch getPedalSwitch() {
      return pedalSwitch_;
    }
    
    // optional .AcceleratorPedalSwitch aPedalSwitch = 10;
    public static final int APEDALSWITCH_FIELD_NUMBER = 10;
    private AcceleratorPedalSwitch aPedalSwitch_;
    public boolean hasAPedalSwitch() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public AcceleratorPedalSwitch getAPedalSwitch() {
      return aPedalSwitch_;
    }
    
    // optional float aPedalPosition = 11;
    public static final int APEDALPOSITION_FIELD_NUMBER = 11;
    private float aPedalPosition_;
    public boolean hasAPedalPosition() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public float getAPedalPosition() {
      return aPedalPosition_;
    }
    
    // optional int32 loadPercent = 12;
    public static final int LOADPERCENT_FIELD_NUMBER = 12;
    private int loadPercent_;
    public boolean hasLoadPercent() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public int getLoadPercent() {
      return loadPercent_;
    }
    
    // optional int32 remoteAcceleratorPosition01 = 13;
    public static final int REMOTEACCELERATORPOSITION01_FIELD_NUMBER = 13;
    private int remoteAcceleratorPosition01_;
    public boolean hasRemoteAcceleratorPosition01() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public int getRemoteAcceleratorPosition01() {
      return remoteAcceleratorPosition01_;
    }
    
    // optional int32 remoteAcceleratorPosition02 = 14;
    public static final int REMOTEACCELERATORPOSITION02_FIELD_NUMBER = 14;
    private int remoteAcceleratorPosition02_;
    public boolean hasRemoteAcceleratorPosition02() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public int getRemoteAcceleratorPosition02() {
      return remoteAcceleratorPosition02_;
    }
    
    // optional int32 maxTorquePercent = 15;
    public static final int MAXTORQUEPERCENT_FIELD_NUMBER = 15;
    private int maxTorquePercent_;
    public boolean hasMaxTorquePercent() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    public int getMaxTorquePercent() {
      return maxTorquePercent_;
    }
    
    // optional int32 frictionTorquePercent = 16;
    public static final int FRICTIONTORQUEPERCENT_FIELD_NUMBER = 16;
    private int frictionTorquePercent_;
    public boolean hasFrictionTorquePercent() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    public int getFrictionTorquePercent() {
      return frictionTorquePercent_;
    }
    
    // optional float engineDesiredSpeed = 17;
    public static final int ENGINEDESIREDSPEED_FIELD_NUMBER = 17;
    private float engineDesiredSpeed_;
    public boolean hasEngineDesiredSpeed() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    public float getEngineDesiredSpeed() {
      return engineDesiredSpeed_;
    }
    
    // optional int32 engineAsymmetryAdjustment = 18;
    public static final int ENGINEASYMMETRYADJUSTMENT_FIELD_NUMBER = 18;
    private int engineAsymmetryAdjustment_;
    public boolean hasEngineAsymmetryAdjustment() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    public int getEngineAsymmetryAdjustment() {
      return engineAsymmetryAdjustment_;
    }
    
    // optional int32 engineLossesPercent = 19;
    public static final int ENGINELOSSESPERCENT_FIELD_NUMBER = 19;
    private int engineLossesPercent_;
    public boolean hasEngineLossesPercent() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    public int getEngineLossesPercent() {
      return engineLossesPercent_;
    }
    
    // optional float exhaustGas = 20;
    public static final int EXHAUSTGAS_FIELD_NUMBER = 20;
    private float exhaustGas_;
    public boolean hasExhaustGas() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    public float getExhaustGas() {
      return exhaustGas_;
    }
    
    // repeated .TreatmentStatus intakeStatus = 21;
    public static final int INTAKESTATUS_FIELD_NUMBER = 21;
    private java.util.List<TreatmentStatus> intakeStatus_;
    public java.util.List<TreatmentStatus> getIntakeStatusList() {
      return intakeStatus_;
    }
    public int getIntakeStatusCount() {
      return intakeStatus_.size();
    }
    public TreatmentStatus getIntakeStatus(int index) {
      return intakeStatus_.get(index);
    }
    
    // repeated .TreatmentStatus exhaustStatus = 22;
    public static final int EXHAUSTSTATUS_FIELD_NUMBER = 22;
    private java.util.List<TreatmentStatus> exhaustStatus_;
    public java.util.List<TreatmentStatus> getExhaustStatusList() {
      return exhaustStatus_;
    }
    public int getExhaustStatusCount() {
      return exhaustStatus_.size();
    }
    public TreatmentStatus getExhaustStatus(int index) {
      return exhaustStatus_.get(index);
    }
    
    private void initFields() {
      enginePercentTorque_ = 0F;
      torqueMode_ = 0;
      driverPercentTorque_ = 0;
      engineSpeed_ = 0;
      engineControlAddress_ = 0;
      engineStartMode_ = 0;
      demandPercentTorque_ = 0;
      status_ = SpeedLimitStatus.activeSpeedLimit;
      pedalSwitch_ = PedalSwitch.kickDownNotActive;
      aPedalSwitch_ = AcceleratorPedalSwitch.lowIdleSwitchSignalNotActive;
      aPedalPosition_ = 0F;
      loadPercent_ = 0;
      remoteAcceleratorPosition01_ = 0;
      remoteAcceleratorPosition02_ = 0;
      maxTorquePercent_ = 0;
      frictionTorquePercent_ = 0;
      engineDesiredSpeed_ = 0F;
      engineAsymmetryAdjustment_ = 0;
      engineLossesPercent_ = 0;
      exhaustGas_ = 0F;
      intakeStatus_ = java.util.Collections.emptyList();
      exhaustStatus_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, enginePercentTorque_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, torqueMode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, driverPercentTorque_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, engineSpeed_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, engineControlAddress_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, engineStartMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, demandPercentTorque_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, status_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, pedalSwitch_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, aPedalSwitch_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, aPedalPosition_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, loadPercent_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, remoteAcceleratorPosition01_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, remoteAcceleratorPosition02_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, maxTorquePercent_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, frictionTorquePercent_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, engineDesiredSpeed_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, engineAsymmetryAdjustment_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(19, engineLossesPercent_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, exhaustGas_);
      }
      for (int i = 0; i < intakeStatus_.size(); i++) {
        output.writeEnum(21, intakeStatus_.get(i).getNumber());
      }
      for (int i = 0; i < exhaustStatus_.size(); i++) {
        output.writeEnum(22, exhaustStatus_.get(i).getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, enginePercentTorque_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, torqueMode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, driverPercentTorque_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, engineSpeed_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, engineControlAddress_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, engineStartMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, demandPercentTorque_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, status_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, pedalSwitch_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, aPedalSwitch_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, aPedalPosition_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, loadPercent_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, remoteAcceleratorPosition01_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, remoteAcceleratorPosition02_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, maxTorquePercent_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, frictionTorquePercent_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, engineDesiredSpeed_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, engineAsymmetryAdjustment_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, engineLossesPercent_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, exhaustGas_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < intakeStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(intakeStatus_.get(i).getNumber());
        }
        size += dataSize;
        size += 2 * intakeStatus_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < exhaustStatus_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(exhaustStatus_.get(i).getNumber());
        }
        size += dataSize;
        size += 2 * exhaustStatus_.size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static EngineController parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static EngineController parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static EngineController parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static EngineController parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static EngineController parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static EngineController parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static EngineController parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static EngineController parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static EngineController parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static EngineController parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(EngineController prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements EngineControllerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LCEngineController.internal_static_EngineController_descriptor;
      }
      
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LCEngineController.internal_static_EngineController_fieldAccessorTable;
      }
      
      // Construct using com.navinfo.opentsp.platform.location.protocol.terminal.CANBUSData.Report.LCEngineController.EngineController.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        enginePercentTorque_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        torqueMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        driverPercentTorque_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        engineSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        engineControlAddress_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        engineStartMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        demandPercentTorque_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        status_ = SpeedLimitStatus.activeSpeedLimit;
        bitField0_ = (bitField0_ & ~0x00000080);
        pedalSwitch_ = PedalSwitch.kickDownNotActive;
        bitField0_ = (bitField0_ & ~0x00000100);
        aPedalSwitch_ = AcceleratorPedalSwitch.lowIdleSwitchSignalNotActive;
        bitField0_ = (bitField0_ & ~0x00000200);
        aPedalPosition_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        loadPercent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        remoteAcceleratorPosition01_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        remoteAcceleratorPosition02_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        maxTorquePercent_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        frictionTorquePercent_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        engineDesiredSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        engineAsymmetryAdjustment_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        engineLossesPercent_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        exhaustGas_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        intakeStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        exhaustStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return EngineController.getDescriptor();
      }
      
      public EngineController getDefaultInstanceForType() {
        return EngineController.getDefaultInstance();
      }
      
      public EngineController build() {
        EngineController result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private EngineController buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        EngineController result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public EngineController buildPartial() {
        EngineController result = new EngineController(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.enginePercentTorque_ = enginePercentTorque_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.torqueMode_ = torqueMode_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.driverPercentTorque_ = driverPercentTorque_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.engineSpeed_ = engineSpeed_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.engineControlAddress_ = engineControlAddress_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.engineStartMode_ = engineStartMode_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.demandPercentTorque_ = demandPercentTorque_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.pedalSwitch_ = pedalSwitch_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.aPedalSwitch_ = aPedalSwitch_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.aPedalPosition_ = aPedalPosition_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.loadPercent_ = loadPercent_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.remoteAcceleratorPosition01_ = remoteAcceleratorPosition01_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.remoteAcceleratorPosition02_ = remoteAcceleratorPosition02_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.maxTorquePercent_ = maxTorquePercent_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.frictionTorquePercent_ = frictionTorquePercent_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.engineDesiredSpeed_ = engineDesiredSpeed_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.engineAsymmetryAdjustment_ = engineAsymmetryAdjustment_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.engineLossesPercent_ = engineLossesPercent_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.exhaustGas_ = exhaustGas_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          intakeStatus_ = java.util.Collections.unmodifiableList(intakeStatus_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.intakeStatus_ = intakeStatus_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          exhaustStatus_ = java.util.Collections.unmodifiableList(exhaustStatus_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.exhaustStatus_ = exhaustStatus_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof EngineController) {
          return mergeFrom((EngineController)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(EngineController other) {
        if (other == EngineController.getDefaultInstance()) return this;
        if (other.hasEnginePercentTorque()) {
          setEnginePercentTorque(other.getEnginePercentTorque());
        }
        if (other.hasTorqueMode()) {
          setTorqueMode(other.getTorqueMode());
        }
        if (other.hasDriverPercentTorque()) {
          setDriverPercentTorque(other.getDriverPercentTorque());
        }
        if (other.hasEngineSpeed()) {
          setEngineSpeed(other.getEngineSpeed());
        }
        if (other.hasEngineControlAddress()) {
          setEngineControlAddress(other.getEngineControlAddress());
        }
        if (other.hasEngineStartMode()) {
          setEngineStartMode(other.getEngineStartMode());
        }
        if (other.hasDemandPercentTorque()) {
          setDemandPercentTorque(other.getDemandPercentTorque());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasPedalSwitch()) {
          setPedalSwitch(other.getPedalSwitch());
        }
        if (other.hasAPedalSwitch()) {
          setAPedalSwitch(other.getAPedalSwitch());
        }
        if (other.hasAPedalPosition()) {
          setAPedalPosition(other.getAPedalPosition());
        }
        if (other.hasLoadPercent()) {
          setLoadPercent(other.getLoadPercent());
        }
        if (other.hasRemoteAcceleratorPosition01()) {
          setRemoteAcceleratorPosition01(other.getRemoteAcceleratorPosition01());
        }
        if (other.hasRemoteAcceleratorPosition02()) {
          setRemoteAcceleratorPosition02(other.getRemoteAcceleratorPosition02());
        }
        if (other.hasMaxTorquePercent()) {
          setMaxTorquePercent(other.getMaxTorquePercent());
        }
        if (other.hasFrictionTorquePercent()) {
          setFrictionTorquePercent(other.getFrictionTorquePercent());
        }
        if (other.hasEngineDesiredSpeed()) {
          setEngineDesiredSpeed(other.getEngineDesiredSpeed());
        }
        if (other.hasEngineAsymmetryAdjustment()) {
          setEngineAsymmetryAdjustment(other.getEngineAsymmetryAdjustment());
        }
        if (other.hasEngineLossesPercent()) {
          setEngineLossesPercent(other.getEngineLossesPercent());
        }
        if (other.hasExhaustGas()) {
          setExhaustGas(other.getExhaustGas());
        }
        if (!other.intakeStatus_.isEmpty()) {
          if (intakeStatus_.isEmpty()) {
            intakeStatus_ = other.intakeStatus_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureIntakeStatusIsMutable();
            intakeStatus_.addAll(other.intakeStatus_);
          }
          onChanged();
        }
        if (!other.exhaustStatus_.isEmpty()) {
          if (exhaustStatus_.isEmpty()) {
            exhaustStatus_ = other.exhaustStatus_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureExhaustStatusIsMutable();
            exhaustStatus_.addAll(other.exhaustStatus_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              enginePercentTorque_ = input.readFloat();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              torqueMode_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              driverPercentTorque_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              engineSpeed_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              engineControlAddress_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              engineStartMode_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              demandPercentTorque_ = input.readInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              SpeedLimitStatus value = SpeedLimitStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                status_ = value;
              }
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              PedalSwitch value = PedalSwitch.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                pedalSwitch_ = value;
              }
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              AcceleratorPedalSwitch value = AcceleratorPedalSwitch.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                aPedalSwitch_ = value;
              }
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              aPedalPosition_ = input.readFloat();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              loadPercent_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              remoteAcceleratorPosition01_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              remoteAcceleratorPosition02_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              maxTorquePercent_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              frictionTorquePercent_ = input.readInt32();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              engineDesiredSpeed_ = input.readFloat();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              engineAsymmetryAdjustment_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              engineLossesPercent_ = input.readInt32();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              exhaustGas_ = input.readFloat();
              break;
            }
            case 168: {
              int rawValue = input.readEnum();
              TreatmentStatus value = TreatmentStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(21, rawValue);
              } else {
                addIntakeStatus(value);
              }
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                TreatmentStatus value = TreatmentStatus.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(21, rawValue);
                } else {
                  addIntakeStatus(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 176: {
              int rawValue = input.readEnum();
              TreatmentStatus value = TreatmentStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(22, rawValue);
              } else {
                addExhaustStatus(value);
              }
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                TreatmentStatus value = TreatmentStatus.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(22, rawValue);
                } else {
                  addExhaustStatus(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional float enginePercentTorque = 1;
      private float enginePercentTorque_ ;
      public boolean hasEnginePercentTorque() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public float getEnginePercentTorque() {
        return enginePercentTorque_;
      }
      public Builder setEnginePercentTorque(float value) {
        bitField0_ |= 0x00000001;
        enginePercentTorque_ = value;
        onChanged();
        return this;
      }
      public Builder clearEnginePercentTorque() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enginePercentTorque_ = 0F;
        onChanged();
        return this;
      }
      
      // optional int32 torqueMode = 2;
      private int torqueMode_ ;
      public boolean hasTorqueMode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getTorqueMode() {
        return torqueMode_;
      }
      public Builder setTorqueMode(int value) {
        bitField0_ |= 0x00000002;
        torqueMode_ = value;
        onChanged();
        return this;
      }
      public Builder clearTorqueMode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        torqueMode_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 driverPercentTorque = 3;
      private int driverPercentTorque_ ;
      public boolean hasDriverPercentTorque() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getDriverPercentTorque() {
        return driverPercentTorque_;
      }
      public Builder setDriverPercentTorque(int value) {
        bitField0_ |= 0x00000004;
        driverPercentTorque_ = value;
        onChanged();
        return this;
      }
      public Builder clearDriverPercentTorque() {
        bitField0_ = (bitField0_ & ~0x00000004);
        driverPercentTorque_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 engineSpeed = 4;
      private int engineSpeed_ ;
      public boolean hasEngineSpeed() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getEngineSpeed() {
        return engineSpeed_;
      }
      public Builder setEngineSpeed(int value) {
        bitField0_ |= 0x00000008;
        engineSpeed_ = value;
        onChanged();
        return this;
      }
      public Builder clearEngineSpeed() {
        bitField0_ = (bitField0_ & ~0x00000008);
        engineSpeed_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 engineControlAddress = 5;
      private int engineControlAddress_ ;
      public boolean hasEngineControlAddress() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getEngineControlAddress() {
        return engineControlAddress_;
      }
      public Builder setEngineControlAddress(int value) {
        bitField0_ |= 0x00000010;
        engineControlAddress_ = value;
        onChanged();
        return this;
      }
      public Builder clearEngineControlAddress() {
        bitField0_ = (bitField0_ & ~0x00000010);
        engineControlAddress_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 engineStartMode = 6;
      private int engineStartMode_ ;
      public boolean hasEngineStartMode() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getEngineStartMode() {
        return engineStartMode_;
      }
      public Builder setEngineStartMode(int value) {
        bitField0_ |= 0x00000020;
        engineStartMode_ = value;
        onChanged();
        return this;
      }
      public Builder clearEngineStartMode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        engineStartMode_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 demandPercentTorque = 7;
      private int demandPercentTorque_ ;
      public boolean hasDemandPercentTorque() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getDemandPercentTorque() {
        return demandPercentTorque_;
      }
      public Builder setDemandPercentTorque(int value) {
        bitField0_ |= 0x00000040;
        demandPercentTorque_ = value;
        onChanged();
        return this;
      }
      public Builder clearDemandPercentTorque() {
        bitField0_ = (bitField0_ & ~0x00000040);
        demandPercentTorque_ = 0;
        onChanged();
        return this;
      }
      
      // optional .SpeedLimitStatus status = 8;
      private SpeedLimitStatus status_ = SpeedLimitStatus.activeSpeedLimit;
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public SpeedLimitStatus getStatus() {
        return status_;
      }
      public Builder setStatus(SpeedLimitStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        status_ = value;
        onChanged();
        return this;
      }
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000080);
        status_ = SpeedLimitStatus.activeSpeedLimit;
        onChanged();
        return this;
      }
      
      // optional .PedalSwitch pedalSwitch = 9;
      private PedalSwitch pedalSwitch_ = PedalSwitch.kickDownNotActive;
      public boolean hasPedalSwitch() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public PedalSwitch getPedalSwitch() {
        return pedalSwitch_;
      }
      public Builder setPedalSwitch(PedalSwitch value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        pedalSwitch_ = value;
        onChanged();
        return this;
      }
      public Builder clearPedalSwitch() {
        bitField0_ = (bitField0_ & ~0x00000100);
        pedalSwitch_ = PedalSwitch.kickDownNotActive;
        onChanged();
        return this;
      }
      
      // optional .AcceleratorPedalSwitch aPedalSwitch = 10;
      private AcceleratorPedalSwitch aPedalSwitch_ = AcceleratorPedalSwitch.lowIdleSwitchSignalNotActive;
      public boolean hasAPedalSwitch() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public AcceleratorPedalSwitch getAPedalSwitch() {
        return aPedalSwitch_;
      }
      public Builder setAPedalSwitch(AcceleratorPedalSwitch value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        aPedalSwitch_ = value;
        onChanged();
        return this;
      }
      public Builder clearAPedalSwitch() {
        bitField0_ = (bitField0_ & ~0x00000200);
        aPedalSwitch_ = AcceleratorPedalSwitch.lowIdleSwitchSignalNotActive;
        onChanged();
        return this;
      }
      
      // optional float aPedalPosition = 11;
      private float aPedalPosition_ ;
      public boolean hasAPedalPosition() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public float getAPedalPosition() {
        return aPedalPosition_;
      }
      public Builder setAPedalPosition(float value) {
        bitField0_ |= 0x00000400;
        aPedalPosition_ = value;
        onChanged();
        return this;
      }
      public Builder clearAPedalPosition() {
        bitField0_ = (bitField0_ & ~0x00000400);
        aPedalPosition_ = 0F;
        onChanged();
        return this;
      }
      
      // optional int32 loadPercent = 12;
      private int loadPercent_ ;
      public boolean hasLoadPercent() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public int getLoadPercent() {
        return loadPercent_;
      }
      public Builder setLoadPercent(int value) {
        bitField0_ |= 0x00000800;
        loadPercent_ = value;
        onChanged();
        return this;
      }
      public Builder clearLoadPercent() {
        bitField0_ = (bitField0_ & ~0x00000800);
        loadPercent_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 remoteAcceleratorPosition01 = 13;
      private int remoteAcceleratorPosition01_ ;
      public boolean hasRemoteAcceleratorPosition01() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public int getRemoteAcceleratorPosition01() {
        return remoteAcceleratorPosition01_;
      }
      public Builder setRemoteAcceleratorPosition01(int value) {
        bitField0_ |= 0x00001000;
        remoteAcceleratorPosition01_ = value;
        onChanged();
        return this;
      }
      public Builder clearRemoteAcceleratorPosition01() {
        bitField0_ = (bitField0_ & ~0x00001000);
        remoteAcceleratorPosition01_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 remoteAcceleratorPosition02 = 14;
      private int remoteAcceleratorPosition02_ ;
      public boolean hasRemoteAcceleratorPosition02() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public int getRemoteAcceleratorPosition02() {
        return remoteAcceleratorPosition02_;
      }
      public Builder setRemoteAcceleratorPosition02(int value) {
        bitField0_ |= 0x00002000;
        remoteAcceleratorPosition02_ = value;
        onChanged();
        return this;
      }
      public Builder clearRemoteAcceleratorPosition02() {
        bitField0_ = (bitField0_ & ~0x00002000);
        remoteAcceleratorPosition02_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 maxTorquePercent = 15;
      private int maxTorquePercent_ ;
      public boolean hasMaxTorquePercent() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      public int getMaxTorquePercent() {
        return maxTorquePercent_;
      }
      public Builder setMaxTorquePercent(int value) {
        bitField0_ |= 0x00004000;
        maxTorquePercent_ = value;
        onChanged();
        return this;
      }
      public Builder clearMaxTorquePercent() {
        bitField0_ = (bitField0_ & ~0x00004000);
        maxTorquePercent_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 frictionTorquePercent = 16;
      private int frictionTorquePercent_ ;
      public boolean hasFrictionTorquePercent() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      public int getFrictionTorquePercent() {
        return frictionTorquePercent_;
      }
      public Builder setFrictionTorquePercent(int value) {
        bitField0_ |= 0x00008000;
        frictionTorquePercent_ = value;
        onChanged();
        return this;
      }
      public Builder clearFrictionTorquePercent() {
        bitField0_ = (bitField0_ & ~0x00008000);
        frictionTorquePercent_ = 0;
        onChanged();
        return this;
      }
      
      // optional float engineDesiredSpeed = 17;
      private float engineDesiredSpeed_ ;
      public boolean hasEngineDesiredSpeed() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      public float getEngineDesiredSpeed() {
        return engineDesiredSpeed_;
      }
      public Builder setEngineDesiredSpeed(float value) {
        bitField0_ |= 0x00010000;
        engineDesiredSpeed_ = value;
        onChanged();
        return this;
      }
      public Builder clearEngineDesiredSpeed() {
        bitField0_ = (bitField0_ & ~0x00010000);
        engineDesiredSpeed_ = 0F;
        onChanged();
        return this;
      }
      
      // optional int32 engineAsymmetryAdjustment = 18;
      private int engineAsymmetryAdjustment_ ;
      public boolean hasEngineAsymmetryAdjustment() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      public int getEngineAsymmetryAdjustment() {
        return engineAsymmetryAdjustment_;
      }
      public Builder setEngineAsymmetryAdjustment(int value) {
        bitField0_ |= 0x00020000;
        engineAsymmetryAdjustment_ = value;
        onChanged();
        return this;
      }
      public Builder clearEngineAsymmetryAdjustment() {
        bitField0_ = (bitField0_ & ~0x00020000);
        engineAsymmetryAdjustment_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 engineLossesPercent = 19;
      private int engineLossesPercent_ ;
      public boolean hasEngineLossesPercent() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      public int getEngineLossesPercent() {
        return engineLossesPercent_;
      }
      public Builder setEngineLossesPercent(int value) {
        bitField0_ |= 0x00040000;
        engineLossesPercent_ = value;
        onChanged();
        return this;
      }
      public Builder clearEngineLossesPercent() {
        bitField0_ = (bitField0_ & ~0x00040000);
        engineLossesPercent_ = 0;
        onChanged();
        return this;
      }
      
      // optional float exhaustGas = 20;
      private float exhaustGas_ ;
      public boolean hasExhaustGas() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      public float getExhaustGas() {
        return exhaustGas_;
      }
      public Builder setExhaustGas(float value) {
        bitField0_ |= 0x00080000;
        exhaustGas_ = value;
        onChanged();
        return this;
      }
      public Builder clearExhaustGas() {
        bitField0_ = (bitField0_ & ~0x00080000);
        exhaustGas_ = 0F;
        onChanged();
        return this;
      }
      
      // repeated .TreatmentStatus intakeStatus = 21;
      private java.util.List<TreatmentStatus> intakeStatus_ =
        java.util.Collections.emptyList();
      private void ensureIntakeStatusIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          intakeStatus_ = new java.util.ArrayList<TreatmentStatus>(intakeStatus_);
          bitField0_ |= 0x00100000;
        }
      }
      public java.util.List<TreatmentStatus> getIntakeStatusList() {
        return java.util.Collections.unmodifiableList(intakeStatus_);
      }
      public int getIntakeStatusCount() {
        return intakeStatus_.size();
      }
      public TreatmentStatus getIntakeStatus(int index) {
        return intakeStatus_.get(index);
      }
      public Builder setIntakeStatus(
          int index, TreatmentStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIntakeStatusIsMutable();
        intakeStatus_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addIntakeStatus(TreatmentStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIntakeStatusIsMutable();
        intakeStatus_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllIntakeStatus(
          Iterable<? extends TreatmentStatus> values) {
        ensureIntakeStatusIsMutable();
        super.addAll(values, intakeStatus_);
        onChanged();
        return this;
      }
      public Builder clearIntakeStatus() {
        intakeStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }
      
      // repeated .TreatmentStatus exhaustStatus = 22;
      private java.util.List<TreatmentStatus> exhaustStatus_ =
        java.util.Collections.emptyList();
      private void ensureExhaustStatusIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          exhaustStatus_ = new java.util.ArrayList<TreatmentStatus>(exhaustStatus_);
          bitField0_ |= 0x00200000;
        }
      }
      public java.util.List<TreatmentStatus> getExhaustStatusList() {
        return java.util.Collections.unmodifiableList(exhaustStatus_);
      }
      public int getExhaustStatusCount() {
        return exhaustStatus_.size();
      }
      public TreatmentStatus getExhaustStatus(int index) {
        return exhaustStatus_.get(index);
      }
      public Builder setExhaustStatus(
          int index, TreatmentStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExhaustStatusIsMutable();
        exhaustStatus_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addExhaustStatus(TreatmentStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExhaustStatusIsMutable();
        exhaustStatus_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllExhaustStatus(
          Iterable<? extends TreatmentStatus> values) {
        ensureExhaustStatusIsMutable();
        super.addAll(values, exhaustStatus_);
        onChanged();
        return this;
      }
      public Builder clearExhaustStatus() {
        exhaustStatus_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:EngineController)
    }
    
    static {
      defaultInstance = new EngineController(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:EngineController)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_EngineController_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_EngineController_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n<core/proto/terminal/CANBUSData/Report/" +
      "EngineController.proto\"\257\005\n\020EngineControl" +
      "ler\022\033\n\023enginePercentTorque\030\001 \001(\002\022\022\n\ntorq" +
      "ueMode\030\002 \001(\005\022\033\n\023driverPercentTorque\030\003 \001(" +
      "\005\022\023\n\013engineSpeed\030\004 \001(\005\022\034\n\024engineControlA" +
      "ddress\030\005 \001(\005\022\027\n\017engineStartMode\030\006 \001(\005\022\033\n" +
      "\023demandPercentTorque\030\007 \001(\005\022!\n\006status\030\010 \001" +
      "(\0162\021.SpeedLimitStatus\022!\n\013pedalSwitch\030\t \001" +
      "(\0162\014.PedalSwitch\022-\n\014aPedalSwitch\030\n \001(\0162\027" +
      ".AcceleratorPedalSwitch\022\026\n\016aPedalPositio",
      "n\030\013 \001(\002\022\023\n\013loadPercent\030\014 \001(\005\022#\n\033remoteAc" +
      "celeratorPosition01\030\r \001(\005\022#\n\033remoteAccel" +
      "eratorPosition02\030\016 \001(\005\022\030\n\020maxTorquePerce" +
      "nt\030\017 \001(\005\022\035\n\025frictionTorquePercent\030\020 \001(\005\022" +
      "\032\n\022engineDesiredSpeed\030\021 \001(\002\022!\n\031engineAsy" +
      "mmetryAdjustment\030\022 \001(\005\022\033\n\023engineLossesPe" +
      "rcent\030\023 \001(\005\022\022\n\nexhaustGas\030\024 \001(\002\022&\n\014intak" +
      "eStatus\030\025 \003(\0162\020.TreatmentStatus\022\'\n\rexhau" +
      "stStatus\030\026 \003(\0162\020.TreatmentStatus*r\n\020Spee" +
      "dLimitStatus\022\024\n\020activeSpeedLimit\020\000\022\027\n\023no",
      "tActiveSpeedLimit\020\001\022\023\n\017errorSpeedLimit\020\002" +
      "\022\032\n\026notAvailableSpeedLimit\020\003*O\n\013PedalSwi" +
      "tch\022\025\n\021kickDownNotActive\020\000\022\022\n\016kickDownAc" +
      "tive\020\001\022\025\n\021notAvailablePedal\020\003*\214\001\n\026Accele" +
      "ratorPedalSwitch\022 \n\034lowIdleSwitchSignalN" +
      "otActive\020\000\022\035\n\031lowIdleSwitchSignalActive\020" +
      "\001\022\024\n\020errorAccelerator\020\002\022\033\n\027notAvailableA" +
      "ccelerator\020\003*k\n\017TreatmentStatus\022\025\n\021notEx" +
      "ceedDewPoint\020\000\022\022\n\016exceedDewPoint\020\001\022\022\n\016er" +
      "rorTreatment\020\002\022\031\n\025notAvailableTreatment\020",
      "\003B_\nIcom.navinfo.opentsp.platform.locati" +
      "on.protocol.terminal.CANBUSData.ReportB\022" +
      "LCEngineController"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_EngineController_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_EngineController_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_EngineController_descriptor,
              new String[] { "EnginePercentTorque", "TorqueMode", "DriverPercentTorque", "EngineSpeed", "EngineControlAddress", "EngineStartMode", "DemandPercentTorque", "Status", "PedalSwitch", "APedalSwitch", "APedalPosition", "LoadPercent", "RemoteAcceleratorPosition01", "RemoteAcceleratorPosition02", "MaxTorquePercent", "FrictionTorquePercent", "EngineDesiredSpeed", "EngineAsymmetryAdjustment", "EngineLossesPercent", "ExhaustGas", "IntakeStatus", "ExhaustStatus", },
              EngineController.class,
              EngineController.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
