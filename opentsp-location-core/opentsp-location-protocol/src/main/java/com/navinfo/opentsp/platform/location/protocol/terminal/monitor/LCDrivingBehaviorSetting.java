// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/terminal/monitor/java/DrivingBehaviorSetting.proto

package com.navinfo.opentsp.platform.location.protocol.terminal.monitor;

public final class LCDrivingBehaviorSetting {
  private LCDrivingBehaviorSetting() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface DrivingBehaviorSettingOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 acceleration = 1;
    boolean hasAcceleration();
    int getAcceleration();
    
    // optional int32 deceleration = 2;
    boolean hasDeceleration();
    int getDeceleration();
    
    // optional int64 sharpTurning = 3;
    boolean hasSharpTurning();
    long getSharpTurning();
    
    // optional int64 lowOil = 4;
    boolean hasLowOil();
    long getLowOil();
    
    // optional int64 slideNeutral = 5;
    boolean hasSlideNeutral();
    long getSlideNeutral();
    
    // optional int64 rpmThreshold = 6;
    boolean hasRpmThreshold();
    long getRpmThreshold();
    
    // optional int64 throttle = 7;
    boolean hasThrottle();
    long getThrottle();
    
    // optional int64 disparitySpeed = 8;
    boolean hasDisparitySpeed();
    long getDisparitySpeed();
    
    // optional int64 brakePressure = 9;
    boolean hasBrakePressure();
    long getBrakePressure();
    
    // optional int64 longTimeBreaking = 10;
    boolean hasLongTimeBreaking();
    long getLongTimeBreaking();
    
    // optional int64 longTimeClutch = 11;
    boolean hasLongTimeClutch();
    long getLongTimeClutch();
    
    // optional int64 parkedTimke = 12;
    boolean hasParkedTimke();
    long getParkedTimke();
    
    // optional int64 coldBootTime = 13;
    boolean hasColdBootTime();
    long getColdBootTime();
    
    // optional int64 idlingTime = 14;
    boolean hasIdlingTime();
    long getIdlingTime();
  }
  public static final class DrivingBehaviorSetting extends
      com.google.protobuf.GeneratedMessage
      implements DrivingBehaviorSettingOrBuilder {
    // Use DrivingBehaviorSetting.newBuilder() to construct.
    private DrivingBehaviorSetting(Builder builder) {
      super(builder);
    }
    private DrivingBehaviorSetting(boolean noInit) {}
    
    private static final DrivingBehaviorSetting defaultInstance;
    public static DrivingBehaviorSetting getDefaultInstance() {
      return defaultInstance;
    }
    
    public DrivingBehaviorSetting getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LCDrivingBehaviorSetting.internal_static_DrivingBehaviorSetting_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LCDrivingBehaviorSetting.internal_static_DrivingBehaviorSetting_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 acceleration = 1;
    public static final int ACCELERATION_FIELD_NUMBER = 1;
    private int acceleration_;
    public boolean hasAcceleration() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getAcceleration() {
      return acceleration_;
    }
    
    // optional int32 deceleration = 2;
    public static final int DECELERATION_FIELD_NUMBER = 2;
    private int deceleration_;
    public boolean hasDeceleration() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getDeceleration() {
      return deceleration_;
    }
    
    // optional int64 sharpTurning = 3;
    public static final int SHARPTURNING_FIELD_NUMBER = 3;
    private long sharpTurning_;
    public boolean hasSharpTurning() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public long getSharpTurning() {
      return sharpTurning_;
    }
    
    // optional int64 lowOil = 4;
    public static final int LOWOIL_FIELD_NUMBER = 4;
    private long lowOil_;
    public boolean hasLowOil() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public long getLowOil() {
      return lowOil_;
    }
    
    // optional int64 slideNeutral = 5;
    public static final int SLIDENEUTRAL_FIELD_NUMBER = 5;
    private long slideNeutral_;
    public boolean hasSlideNeutral() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public long getSlideNeutral() {
      return slideNeutral_;
    }
    
    // optional int64 rpmThreshold = 6;
    public static final int RPMTHRESHOLD_FIELD_NUMBER = 6;
    private long rpmThreshold_;
    public boolean hasRpmThreshold() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public long getRpmThreshold() {
      return rpmThreshold_;
    }
    
    // optional int64 throttle = 7;
    public static final int THROTTLE_FIELD_NUMBER = 7;
    private long throttle_;
    public boolean hasThrottle() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public long getThrottle() {
      return throttle_;
    }
    
    // optional int64 disparitySpeed = 8;
    public static final int DISPARITYSPEED_FIELD_NUMBER = 8;
    private long disparitySpeed_;
    public boolean hasDisparitySpeed() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public long getDisparitySpeed() {
      return disparitySpeed_;
    }
    
    // optional int64 brakePressure = 9;
    public static final int BRAKEPRESSURE_FIELD_NUMBER = 9;
    private long brakePressure_;
    public boolean hasBrakePressure() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public long getBrakePressure() {
      return brakePressure_;
    }
    
    // optional int64 longTimeBreaking = 10;
    public static final int LONGTIMEBREAKING_FIELD_NUMBER = 10;
    private long longTimeBreaking_;
    public boolean hasLongTimeBreaking() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public long getLongTimeBreaking() {
      return longTimeBreaking_;
    }
    
    // optional int64 longTimeClutch = 11;
    public static final int LONGTIMECLUTCH_FIELD_NUMBER = 11;
    private long longTimeClutch_;
    public boolean hasLongTimeClutch() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public long getLongTimeClutch() {
      return longTimeClutch_;
    }
    
    // optional int64 parkedTimke = 12;
    public static final int PARKEDTIMKE_FIELD_NUMBER = 12;
    private long parkedTimke_;
    public boolean hasParkedTimke() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public long getParkedTimke() {
      return parkedTimke_;
    }
    
    // optional int64 coldBootTime = 13;
    public static final int COLDBOOTTIME_FIELD_NUMBER = 13;
    private long coldBootTime_;
    public boolean hasColdBootTime() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public long getColdBootTime() {
      return coldBootTime_;
    }
    
    // optional int64 idlingTime = 14;
    public static final int IDLINGTIME_FIELD_NUMBER = 14;
    private long idlingTime_;
    public boolean hasIdlingTime() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public long getIdlingTime() {
      return idlingTime_;
    }
    
    private void initFields() {
      acceleration_ = 0;
      deceleration_ = 0;
      sharpTurning_ = 0L;
      lowOil_ = 0L;
      slideNeutral_ = 0L;
      rpmThreshold_ = 0L;
      throttle_ = 0L;
      disparitySpeed_ = 0L;
      brakePressure_ = 0L;
      longTimeBreaking_ = 0L;
      longTimeClutch_ = 0L;
      parkedTimke_ = 0L;
      coldBootTime_ = 0L;
      idlingTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, acceleration_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, deceleration_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, sharpTurning_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, lowOil_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, slideNeutral_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(6, rpmThreshold_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(7, throttle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, disparitySpeed_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt64(9, brakePressure_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt64(10, longTimeBreaking_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt64(11, longTimeClutch_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt64(12, parkedTimke_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, coldBootTime_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, idlingTime_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, acceleration_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, deceleration_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, sharpTurning_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, lowOil_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, slideNeutral_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, rpmThreshold_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, throttle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, disparitySpeed_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, brakePressure_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, longTimeBreaking_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, longTimeClutch_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, parkedTimke_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, coldBootTime_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, idlingTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static DrivingBehaviorSetting parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static DrivingBehaviorSetting parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static DrivingBehaviorSetting parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static DrivingBehaviorSetting parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static DrivingBehaviorSetting parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static DrivingBehaviorSetting parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static DrivingBehaviorSetting parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static DrivingBehaviorSetting parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static DrivingBehaviorSetting parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static DrivingBehaviorSetting parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(DrivingBehaviorSetting prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements DrivingBehaviorSettingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LCDrivingBehaviorSetting.internal_static_DrivingBehaviorSetting_descriptor;
      }
      
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LCDrivingBehaviorSetting.internal_static_DrivingBehaviorSetting_fieldAccessorTable;
      }
      
      // Construct using com.navinfo.opentsp.platform.location.protocol.terminal.monitor.LCDrivingBehaviorSetting.DrivingBehaviorSetting.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        acceleration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        deceleration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        sharpTurning_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        lowOil_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        slideNeutral_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        rpmThreshold_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        throttle_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        disparitySpeed_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        brakePressure_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        longTimeBreaking_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000200);
        longTimeClutch_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000400);
        parkedTimke_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        coldBootTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        idlingTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return DrivingBehaviorSetting.getDescriptor();
      }
      
      public DrivingBehaviorSetting getDefaultInstanceForType() {
        return DrivingBehaviorSetting.getDefaultInstance();
      }
      
      public DrivingBehaviorSetting build() {
        DrivingBehaviorSetting result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private DrivingBehaviorSetting buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        DrivingBehaviorSetting result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public DrivingBehaviorSetting buildPartial() {
        DrivingBehaviorSetting result = new DrivingBehaviorSetting(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.acceleration_ = acceleration_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.deceleration_ = deceleration_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sharpTurning_ = sharpTurning_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lowOil_ = lowOil_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.slideNeutral_ = slideNeutral_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.rpmThreshold_ = rpmThreshold_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.throttle_ = throttle_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.disparitySpeed_ = disparitySpeed_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.brakePressure_ = brakePressure_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.longTimeBreaking_ = longTimeBreaking_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.longTimeClutch_ = longTimeClutch_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.parkedTimke_ = parkedTimke_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.coldBootTime_ = coldBootTime_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.idlingTime_ = idlingTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof DrivingBehaviorSetting) {
          return mergeFrom((DrivingBehaviorSetting)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(DrivingBehaviorSetting other) {
        if (other == DrivingBehaviorSetting.getDefaultInstance()) return this;
        if (other.hasAcceleration()) {
          setAcceleration(other.getAcceleration());
        }
        if (other.hasDeceleration()) {
          setDeceleration(other.getDeceleration());
        }
        if (other.hasSharpTurning()) {
          setSharpTurning(other.getSharpTurning());
        }
        if (other.hasLowOil()) {
          setLowOil(other.getLowOil());
        }
        if (other.hasSlideNeutral()) {
          setSlideNeutral(other.getSlideNeutral());
        }
        if (other.hasRpmThreshold()) {
          setRpmThreshold(other.getRpmThreshold());
        }
        if (other.hasThrottle()) {
          setThrottle(other.getThrottle());
        }
        if (other.hasDisparitySpeed()) {
          setDisparitySpeed(other.getDisparitySpeed());
        }
        if (other.hasBrakePressure()) {
          setBrakePressure(other.getBrakePressure());
        }
        if (other.hasLongTimeBreaking()) {
          setLongTimeBreaking(other.getLongTimeBreaking());
        }
        if (other.hasLongTimeClutch()) {
          setLongTimeClutch(other.getLongTimeClutch());
        }
        if (other.hasParkedTimke()) {
          setParkedTimke(other.getParkedTimke());
        }
        if (other.hasColdBootTime()) {
          setColdBootTime(other.getColdBootTime());
        }
        if (other.hasIdlingTime()) {
          setIdlingTime(other.getIdlingTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              acceleration_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              deceleration_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sharpTurning_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              lowOil_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              slideNeutral_ = input.readInt64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              rpmThreshold_ = input.readInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              throttle_ = input.readInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              disparitySpeed_ = input.readInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              brakePressure_ = input.readInt64();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              longTimeBreaking_ = input.readInt64();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              longTimeClutch_ = input.readInt64();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              parkedTimke_ = input.readInt64();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              coldBootTime_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              idlingTime_ = input.readInt64();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 acceleration = 1;
      private int acceleration_ ;
      public boolean hasAcceleration() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getAcceleration() {
        return acceleration_;
      }
      public Builder setAcceleration(int value) {
        bitField0_ |= 0x00000001;
        acceleration_ = value;
        onChanged();
        return this;
      }
      public Builder clearAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000001);
        acceleration_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 deceleration = 2;
      private int deceleration_ ;
      public boolean hasDeceleration() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getDeceleration() {
        return deceleration_;
      }
      public Builder setDeceleration(int value) {
        bitField0_ |= 0x00000002;
        deceleration_ = value;
        onChanged();
        return this;
      }
      public Builder clearDeceleration() {
        bitField0_ = (bitField0_ & ~0x00000002);
        deceleration_ = 0;
        onChanged();
        return this;
      }
      
      // optional int64 sharpTurning = 3;
      private long sharpTurning_ ;
      public boolean hasSharpTurning() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public long getSharpTurning() {
        return sharpTurning_;
      }
      public Builder setSharpTurning(long value) {
        bitField0_ |= 0x00000004;
        sharpTurning_ = value;
        onChanged();
        return this;
      }
      public Builder clearSharpTurning() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sharpTurning_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 lowOil = 4;
      private long lowOil_ ;
      public boolean hasLowOil() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public long getLowOil() {
        return lowOil_;
      }
      public Builder setLowOil(long value) {
        bitField0_ |= 0x00000008;
        lowOil_ = value;
        onChanged();
        return this;
      }
      public Builder clearLowOil() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lowOil_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 slideNeutral = 5;
      private long slideNeutral_ ;
      public boolean hasSlideNeutral() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public long getSlideNeutral() {
        return slideNeutral_;
      }
      public Builder setSlideNeutral(long value) {
        bitField0_ |= 0x00000010;
        slideNeutral_ = value;
        onChanged();
        return this;
      }
      public Builder clearSlideNeutral() {
        bitField0_ = (bitField0_ & ~0x00000010);
        slideNeutral_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 rpmThreshold = 6;
      private long rpmThreshold_ ;
      public boolean hasRpmThreshold() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public long getRpmThreshold() {
        return rpmThreshold_;
      }
      public Builder setRpmThreshold(long value) {
        bitField0_ |= 0x00000020;
        rpmThreshold_ = value;
        onChanged();
        return this;
      }
      public Builder clearRpmThreshold() {
        bitField0_ = (bitField0_ & ~0x00000020);
        rpmThreshold_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 throttle = 7;
      private long throttle_ ;
      public boolean hasThrottle() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public long getThrottle() {
        return throttle_;
      }
      public Builder setThrottle(long value) {
        bitField0_ |= 0x00000040;
        throttle_ = value;
        onChanged();
        return this;
      }
      public Builder clearThrottle() {
        bitField0_ = (bitField0_ & ~0x00000040);
        throttle_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 disparitySpeed = 8;
      private long disparitySpeed_ ;
      public boolean hasDisparitySpeed() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public long getDisparitySpeed() {
        return disparitySpeed_;
      }
      public Builder setDisparitySpeed(long value) {
        bitField0_ |= 0x00000080;
        disparitySpeed_ = value;
        onChanged();
        return this;
      }
      public Builder clearDisparitySpeed() {
        bitField0_ = (bitField0_ & ~0x00000080);
        disparitySpeed_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 brakePressure = 9;
      private long brakePressure_ ;
      public boolean hasBrakePressure() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public long getBrakePressure() {
        return brakePressure_;
      }
      public Builder setBrakePressure(long value) {
        bitField0_ |= 0x00000100;
        brakePressure_ = value;
        onChanged();
        return this;
      }
      public Builder clearBrakePressure() {
        bitField0_ = (bitField0_ & ~0x00000100);
        brakePressure_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 longTimeBreaking = 10;
      private long longTimeBreaking_ ;
      public boolean hasLongTimeBreaking() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public long getLongTimeBreaking() {
        return longTimeBreaking_;
      }
      public Builder setLongTimeBreaking(long value) {
        bitField0_ |= 0x00000200;
        longTimeBreaking_ = value;
        onChanged();
        return this;
      }
      public Builder clearLongTimeBreaking() {
        bitField0_ = (bitField0_ & ~0x00000200);
        longTimeBreaking_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 longTimeClutch = 11;
      private long longTimeClutch_ ;
      public boolean hasLongTimeClutch() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public long getLongTimeClutch() {
        return longTimeClutch_;
      }
      public Builder setLongTimeClutch(long value) {
        bitField0_ |= 0x00000400;
        longTimeClutch_ = value;
        onChanged();
        return this;
      }
      public Builder clearLongTimeClutch() {
        bitField0_ = (bitField0_ & ~0x00000400);
        longTimeClutch_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 parkedTimke = 12;
      private long parkedTimke_ ;
      public boolean hasParkedTimke() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public long getParkedTimke() {
        return parkedTimke_;
      }
      public Builder setParkedTimke(long value) {
        bitField0_ |= 0x00000800;
        parkedTimke_ = value;
        onChanged();
        return this;
      }
      public Builder clearParkedTimke() {
        bitField0_ = (bitField0_ & ~0x00000800);
        parkedTimke_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 coldBootTime = 13;
      private long coldBootTime_ ;
      public boolean hasColdBootTime() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public long getColdBootTime() {
        return coldBootTime_;
      }
      public Builder setColdBootTime(long value) {
        bitField0_ |= 0x00001000;
        coldBootTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearColdBootTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        coldBootTime_ = 0L;
        onChanged();
        return this;
      }
      
      // optional int64 idlingTime = 14;
      private long idlingTime_ ;
      public boolean hasIdlingTime() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public long getIdlingTime() {
        return idlingTime_;
      }
      public Builder setIdlingTime(long value) {
        bitField0_ |= 0x00002000;
        idlingTime_ = value;
        onChanged();
        return this;
      }
      public Builder clearIdlingTime() {
        bitField0_ = (bitField0_ & ~0x00002000);
        idlingTime_ = 0L;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:DrivingBehaviorSetting)
    }
    
    static {
      defaultInstance = new DrivingBehaviorSetting(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:DrivingBehaviorSetting)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_DrivingBehaviorSetting_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_DrivingBehaviorSetting_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n=core/proto/terminal/monitor/java/Drivi" +
      "ngBehaviorSetting.proto\"\310\002\n\026DrivingBehav" +
      "iorSetting\022\024\n\014acceleration\030\001 \001(\005\022\024\n\014dece" +
      "leration\030\002 \001(\005\022\024\n\014sharpTurning\030\003 \001(\003\022\016\n\006" +
      "lowOil\030\004 \001(\003\022\024\n\014slideNeutral\030\005 \001(\003\022\024\n\014rp" +
      "mThreshold\030\006 \001(\003\022\020\n\010throttle\030\007 \001(\003\022\026\n\016di" +
      "sparitySpeed\030\010 \001(\003\022\025\n\rbrakePressure\030\t \001(" +
      "\003\022\030\n\020longTimeBreaking\030\n \001(\003\022\026\n\016longTimeC" +
      "lutch\030\013 \001(\003\022\023\n\013parkedTimke\030\014 \001(\003\022\024\n\014cold" +
      "BootTime\030\r \001(\003\022\022\n\nidlingTime\030\016 \001(\003B[\n?co",
      "m.navinfo.opentsp.platform.location.prot" +
      "ocol.terminal.monitorB\030LCDrivingBehavior" +
      "Setting"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_DrivingBehaviorSetting_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_DrivingBehaviorSetting_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_DrivingBehaviorSetting_descriptor,
              new String[] { "Acceleration", "Deceleration", "SharpTurning", "LowOil", "SlideNeutral", "RpmThreshold", "Throttle", "DisparitySpeed", "BrakePressure", "LongTimeBreaking", "LongTimeClutch", "ParkedTimke", "ColdBootTime", "IdlingTime", },
              DrivingBehaviorSetting.class,
              DrivingBehaviorSetting.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
