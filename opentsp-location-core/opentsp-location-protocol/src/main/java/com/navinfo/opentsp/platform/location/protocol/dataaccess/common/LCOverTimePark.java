// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/dataaccess/common/java/OverTimePark.proto

package com.navinfo.opentsp.platform.location.protocol.dataaccess.common;

public final class LCOverTimePark {
  private LCOverTimePark() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface OverTimeParkOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int64 areaId = 1;
    boolean hasAreaId();
    long getAreaId();
    
    // required int32 overtimeLimit = 2;
    boolean hasOvertimeLimit();
    int getOvertimeLimit();
    
    // optional int32 overtimeNotifyLimit = 3;
    boolean hasOvertimeNotifyLimit();
    int getOvertimeNotifyLimit();
  }
  public static final class OverTimePark extends
      com.google.protobuf.GeneratedMessage
      implements OverTimeParkOrBuilder {
    // Use OverTimePark.newBuilder() to construct.
    private OverTimePark(Builder builder) {
      super(builder);
    }
    private OverTimePark(boolean noInit) {}
    
    private static final OverTimePark defaultInstance;
    public static OverTimePark getDefaultInstance() {
      return defaultInstance;
    }
    
    public OverTimePark getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return LCOverTimePark.internal_static_OverTimePark_descriptor;
    }
    
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return LCOverTimePark.internal_static_OverTimePark_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int64 areaId = 1;
    public static final int AREAID_FIELD_NUMBER = 1;
    private long areaId_;
    public boolean hasAreaId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public long getAreaId() {
      return areaId_;
    }
    
    // required int32 overtimeLimit = 2;
    public static final int OVERTIMELIMIT_FIELD_NUMBER = 2;
    private int overtimeLimit_;
    public boolean hasOvertimeLimit() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getOvertimeLimit() {
      return overtimeLimit_;
    }
    
    // optional int32 overtimeNotifyLimit = 3;
    public static final int OVERTIMENOTIFYLIMIT_FIELD_NUMBER = 3;
    private int overtimeNotifyLimit_;
    public boolean hasOvertimeNotifyLimit() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getOvertimeNotifyLimit() {
      return overtimeNotifyLimit_;
    }
    
    private void initFields() {
      areaId_ = 0L;
      overtimeLimit_ = 0;
      overtimeNotifyLimit_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasAreaId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOvertimeLimit()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, areaId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, overtimeLimit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, overtimeNotifyLimit_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, areaId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, overtimeLimit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, overtimeNotifyLimit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static OverTimePark parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static OverTimePark parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static OverTimePark parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static OverTimePark parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static OverTimePark parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static OverTimePark parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static OverTimePark parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static OverTimePark parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static OverTimePark parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static OverTimePark parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(OverTimePark prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements OverTimeParkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return LCOverTimePark.internal_static_OverTimePark_descriptor;
      }
      
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return LCOverTimePark.internal_static_OverTimePark_fieldAccessorTable;
      }
      
      // Construct using com.navinfo.opentsp.platform.location.protocol.dataaccess.common.LCOverTimePark.OverTimePark.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        areaId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        overtimeLimit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        overtimeNotifyLimit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return OverTimePark.getDescriptor();
      }
      
      public OverTimePark getDefaultInstanceForType() {
        return OverTimePark.getDefaultInstance();
      }
      
      public OverTimePark build() {
        OverTimePark result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private OverTimePark buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        OverTimePark result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public OverTimePark buildPartial() {
        OverTimePark result = new OverTimePark(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.areaId_ = areaId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.overtimeLimit_ = overtimeLimit_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.overtimeNotifyLimit_ = overtimeNotifyLimit_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof OverTimePark) {
          return mergeFrom((OverTimePark)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(OverTimePark other) {
        if (other == OverTimePark.getDefaultInstance()) return this;
        if (other.hasAreaId()) {
          setAreaId(other.getAreaId());
        }
        if (other.hasOvertimeLimit()) {
          setOvertimeLimit(other.getOvertimeLimit());
        }
        if (other.hasOvertimeNotifyLimit()) {
          setOvertimeNotifyLimit(other.getOvertimeNotifyLimit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasAreaId()) {
          
          return false;
        }
        if (!hasOvertimeLimit()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              areaId_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              overtimeLimit_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              overtimeNotifyLimit_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int64 areaId = 1;
      private long areaId_ ;
      public boolean hasAreaId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public long getAreaId() {
        return areaId_;
      }
      public Builder setAreaId(long value) {
        bitField0_ |= 0x00000001;
        areaId_ = value;
        onChanged();
        return this;
      }
      public Builder clearAreaId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        areaId_ = 0L;
        onChanged();
        return this;
      }
      
      // required int32 overtimeLimit = 2;
      private int overtimeLimit_ ;
      public boolean hasOvertimeLimit() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getOvertimeLimit() {
        return overtimeLimit_;
      }
      public Builder setOvertimeLimit(int value) {
        bitField0_ |= 0x00000002;
        overtimeLimit_ = value;
        onChanged();
        return this;
      }
      public Builder clearOvertimeLimit() {
        bitField0_ = (bitField0_ & ~0x00000002);
        overtimeLimit_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 overtimeNotifyLimit = 3;
      private int overtimeNotifyLimit_ ;
      public boolean hasOvertimeNotifyLimit() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getOvertimeNotifyLimit() {
        return overtimeNotifyLimit_;
      }
      public Builder setOvertimeNotifyLimit(int value) {
        bitField0_ |= 0x00000004;
        overtimeNotifyLimit_ = value;
        onChanged();
        return this;
      }
      public Builder clearOvertimeNotifyLimit() {
        bitField0_ = (bitField0_ & ~0x00000004);
        overtimeNotifyLimit_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:OverTimePark)
    }
    
    static {
      defaultInstance = new OverTimePark(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:OverTimePark)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_OverTimePark_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_OverTimePark_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n4core/proto/dataaccess/common/java/Over" +
      "TimePark.proto\"R\n\014OverTimePark\022\016\n\006areaId" +
      "\030\001 \002(\003\022\025\n\rovertimeLimit\030\002 \002(\005\022\033\n\023overtim" +
      "eNotifyLimit\030\003 \001(\005BR\n@com.navinfo.opents" +
      "p.platform.location.protocol.dataaccess." +
      "commonB\016LCOverTimePark"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_OverTimePark_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_OverTimePark_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_OverTimePark_descriptor,
              new String[] { "AreaId", "OvertimeLimit", "OvertimeNotifyLimit", },
              OverTimePark.class,
              OverTimePark.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
